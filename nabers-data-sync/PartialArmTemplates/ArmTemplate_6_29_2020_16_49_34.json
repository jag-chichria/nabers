{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "nabers-data-sync"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/01 Pull Members Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "forEachRow",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set Variable Rating",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('_vratings')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Lookup Each Building by Address In Salesforce",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set variable _currentRatingItem",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "Select id from NO_Building__c \nwhere Postcode__c = '@{variables('_vcurrentRatingItem')[0].Postcode}'\nand State__c = '@{variables('_vcurrentRatingItem')[0].State}'\nand Suburb__c = '@{variables('_vcurrentRatingItem')[0].Suburb}'\nand Street_Number__c = '@{variables('_vcurrentRatingItem')[0].StreetNumber}'\nand Street_Name__c = '@{variables('_vcurrentRatingItem')[0].StreetName}'\nand Name = '@{variables('_vcurrentRatingItem')[0].PremiseName}'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "sf_Buildings",
											"type": "DatasetReference"
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "If Building In Salesforce Exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set Variable _sf_buildingRecord",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(length(variables('_vsf_buildingRecord')), 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "insertPremiseDetails",
												"description": "Building does not exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupBuildingData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_premise_id": {
															"value": {
																"value": "@variables('_vcurrentRatingItem')[0].PremiseID",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"salesforce_building_Id": {
															"value": "",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "insertPremiseDetailsWithSalesForceId",
												"description": "Building does exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupBuildingData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_premise_id": {
															"value": {
																"value": "@variables('_vcurrentRatingItem')[0].PremiseID",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"salesforce_building_Id": {
															"value": {
																"value": "@activity('Lookup Each Building by Address In Salesforce').Output.value[0].Id",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Set Variable _sf_buildingRecord",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Lookup Each Building by Address In Salesforce",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "_vsf_buildingRecord",
										"value": {
											"value": "@activity('Lookup Each Building by Address In Salesforce').output.value",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable _currentRatingItem",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "_vcurrentRatingItem",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup Each Assessor by Email In Salesforce",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get Assessor Details by Assessor ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "Select id from Contact\nwhere Email= '@{activity('Get Assessor Details by Assessor ID').output.value[0].Email}'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "sf_contacts",
											"type": "DatasetReference"
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Set Variable _sf_AssessorRecord",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Lookup Each Assessor by Email In Salesforce",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "_vsf_AssessorRecord",
										"value": {
											"value": "@activity('Lookup Each Assessor by Email In Salesforce').output.value",
											"type": "Expression"
										}
									}
								},
								{
									"name": "If Assessor In Salesforce Exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set Variable _sf_AssessorRecord",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(length(variables('_vsf_AssessorRecord')), 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "insertAssessorDetails",
												"description": "Building does not exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupAssessorData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_assessor_Id": {
															"value": {
																"value": "@activity('Get Assessor Details by Assessor ID').output.value[0].AssessorId",
																"type": "Expression"
															},
															"type": "String"
														},
														"salesforce_assessor_Id": {
															"value": null,
															"type": "String"
														},
														"member_company_id": {
															"value": {
																"value": "@activity('Get Assessor Details by Assessor ID').output.value[0].CompanyId",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "insertAssessorDetailsWithSalesForceId",
												"description": "Building does exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupAssessorData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_assessor_Id": {
															"value": {
																"value": "@activity('usp_GetRating').output.value[0].AssessorID",
																"type": "Expression"
															},
															"type": "String"
														},
														"salesforce_assessor_Id": {
															"value": {
																"value": "@activity('Lookup Each Assessor by Email In Salesforce').output.value[0].Id",
																"type": "Expression"
															},
															"type": "String"
														},
														"member_company_id": {
															"value": {
																"value": "@activity('Get Assessor Details by Assessor ID').output.value[0].CompanyId",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Lookup Each Company by ABN In Salesforce",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get Company Details by Company Id",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "Select id from Account\nwhere NO_ABN__c = '@{activity('Get Company Details by Company Id').output.value[0].ABN}'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "sf_company",
											"type": "DatasetReference"
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Set Variable _sf_CompanyRecord",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Lookup Each Company by ABN In Salesforce",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "_vsf_CompanyRecord",
										"value": {
											"value": "@activity('Lookup Each Company by ABN In Salesforce').output.value",
											"type": "Expression"
										}
									}
								},
								{
									"name": "If Company In Salesforce Exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set Variable _sf_CompanyRecord",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(length(variables('_vsf_CompanyRecord')), 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "insertCompanyDetails",
												"description": "Company does not exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupCompanyData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_company_Id": {
															"value": {
																"value": "@activity('Get Company Details by Company Id').output.value[0].CompanyId",
																"type": "Expression"
															},
															"type": "String"
														},
														"salesforce_company_Id": {
															"value": null,
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "insertCompanyDetailsWithSalesForceId_copy1",
												"description": "Company does exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupCompanyData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_company_Id": {
															"value": {
																"value": "@activity('usp_GetRating').output.value[0].CompanyId",
																"type": "Expression"
															},
															"type": "String"
														},
														"salesforce_company_Id": {
															"value": {
																"value": "@activity('Lookup Each Company by ABN In Salesforce').output.value[0].Id",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Get Assessor Details by Assessor ID",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set variable _currentRatingItem",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Select Top 1 * from AssessorsStage where AssessorId = '@{item()[0].AssessorId}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "db_lookup_assessors",
											"type": "DatasetReference"
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Get Company Details by Company Id",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set variable _currentRatingItem",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Select Top 1 * from CompanyStage where CompanyId = @{item()[0].CompanyId}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "db_company",
											"type": "DatasetReference"
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Get Tech Officer Details by Officer Id",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set variable _currentRatingItem",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Select Top 1 * from TechOfficersStage where [AdministratorID]= @{item()[0].OfficerId}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "db_company",
											"type": "DatasetReference"
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Lookup Each Tech Officer by Email In Salesforce",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get Tech Officer Details by Officer Id",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "Select id from User\nwhere Email like '%@{activity('Get Tech Officer Details by Officer Id').output.value[0].Email}%'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "sf_users",
											"type": "DatasetReference"
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "If User In Salesforce Exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set Variable _vsf_TechOfficerRecord",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(length(variables('_vsf_TechOfficerRecord')), 0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Insert Anomaly",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "dbo.usp_InsertDataSyncAnomalies",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"process_name": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"anamoly_desc": {
															"value": {
																"value": "@concat('No Tech Officer found for this email address -', activity('Get Tech Officer Details by Officer Id').output.value[0].Email)",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "insertOfficerDetailsWithSalesForceId",
												"description": "Company does exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[usp_InsertLookupTechOfficerData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_officer_Id": {
															"value": {
																"value": "@activity('usp_GetRating').output.value[0].OfficerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"salesforce_user_Id": {
															"value": {
																"value": "@activity('Lookup Each Tech Officer by Email In Salesforce').output.value[0].Id",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Set Variable _vsf_TechOfficerRecord",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Lookup Each Tech Officer by Email In Salesforce",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "_vsf_TechOfficerRecord",
										"value": {
											"value": "@activity('Lookup Each Tech Officer by Email In Salesforce').output.value",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "usp_GetRating",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_GetRating]",
								"storedProcedureParameters": {
									"batchid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "db_members_rating",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set Variable Rating",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "usp_GetRating",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_vratings",
							"value": [
								"@activity('usp_GetRating').output.value"
							]
						}
					},
					{
						"name": "Update Batch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LogBatchDetails]",
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.pbatch_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"process_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"stage": {
									"value": "In Progress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NABERSStaging",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"pbatch_id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"_vratings": {
						"type": "Array"
					},
					"_vsf_buildingRecord": {
						"type": "Array"
					},
					"_vcurrentRatingItem": {
						"type": "Array"
					},
					"_vsf_AssessorRecord": {
						"type": "Array"
					},
					"_vsf_CompanyRecord": {
						"type": "Array"
					},
					"_vsf_TechOfficerRecord": {
						"type": "Array"
					},
					"_dummy": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_members_rating')]",
				"[concat(variables('factoryId'), '/datasets/sf_users')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/01a Create Building In Salesforce')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "createNotFoundBuilding",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_GetBuildingToCreateInSalesForce]",
								"storedProcedureParameters": {
									"batchid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "SalesforceSink",
								"writeBatchSize": 5000,
								"writeBehavior": "insert",
								"ignoreNullValues": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"name": "Name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "postcode",
											"type": "String"
										},
										"sink": {
											"name": "Postcode__c",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "state",
											"type": "String"
										},
										"sink": {
											"name": "State__c",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "streetname",
											"type": "String"
										},
										"sink": {
											"name": "Street_Name__c",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "streetnumber",
											"type": "String"
										},
										"sink": {
											"name": "Street_Number__c",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "suburb",
											"type": "String"
										},
										"sink": {
											"name": "Suburb__c",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "member_premise_id"
										},
										"sink": {
											"name": "NOCRM_External_ID__c"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "db_lookup_sf_buildings_ids",
								"type": "DatasetReference",
								"parameters": {
									"pbatch_id": 1
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sf_Buildings",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Update Batch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LogBatchDetails]",
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.pbatch_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"process_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"stage": {
									"value": "In Progress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NABERSStaging",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "usp_GetSalesforce",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "createNotFoundBuilding",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_GetBuildingToCreateInSalesForce]",
								"storedProcedureParameters": {
									"batchid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "db_members_rating",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "forEachRow",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set Variable Rating",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('_vnewBuildingsInSF')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Lookup Each Building by Name In Salesforce",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "Select id from NO_Building__c \nwhere Postcode__c = '@{item().Postcode}'\nand State__c = '@{item().State}'\nand Suburb__c = '@{item().Suburb}'\nand Street_Number__c = '@{item().StreetNumber}'\nand Street_Name__c = '@{item().StreetName}'\nand Name = '@{item().Name}'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "sf_Buildings",
											"type": "DatasetReference"
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "UpdateNewSalesforceIdForBuilding",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Lookup Each Building by Name In Salesforce",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_UpdateNewSalesforceIdForBuilding]",
										"storedProcedureParameters": {
											"batch_id": {
												"value": {
													"value": "@pipeline().parameters.pbatch_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"member_premise_id": {
												"value": {
													"value": "@item().member_premise_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"salesforce_building_Id": {
												"value": {
													"value": "@activity('Lookup Each Building by Name In Salesforce').output.value[0].Id",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "NABERSStaging",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Set Variable Rating",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "usp_GetSalesforce",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_vnewBuildingsInSF",
							"value": {
								"value": "@activity('usp_GetSalesforce').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"pbatch_id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"_defaultCountry": {
						"type": "String",
						"defaultValue": "Australia"
					},
					"_defaultPremiseType": {
						"type": "String",
						"defaultValue": "Shopping Centre"
					},
					"_vnewBuildingsInSF": {
						"type": "Array"
					},
					"_vsf_buildingRecord": {
						"type": "String"
					},
					"_vnewBuildingInSF": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_members_rating')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/01b Transform Country in Building')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "01_Transform",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Update Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "01_Transform_Country_In_Company",
								"type": "DataFlowReference",
								"parameters": {
									"pbatch_id": "1"
								},
								"datasetParameters": {
									"source1": {
										"pbatch_id": 1
									},
									"sink1": {
										"pbatch_id": 1
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "Update Batch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LogBatchDetails]",
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.pbatch_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"process_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"stage": {
									"value": "In Progress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NABERSStaging",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"pbatch_id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/01b Transform Ratings')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "01_Transform",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Update Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "01_Transform_Rating",
								"type": "DataFlowReference",
								"parameters": {
									"pbatch_id": {
										"value": "@pipeline().parameters.pbatch_id",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"getLookupSalesforceBuildings": {
										"pbatch_id": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									},
									"getLookupSalesforceAssessors": {
										"pbatch_id": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									},
									"getLookupSalesforceTechOfficer": {
										"pbatch_id": 1
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "Update Batch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LogBatchDetails]",
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.pbatch_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"process_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"stage": {
									"value": "In Progress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NABERSStaging",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"pbatch_id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/01_Transform_Rating')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/02 Create Ratings')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update Batch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LogBatchDetails]",
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.pbatch_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"process_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"stage": {
									"value": "In Progress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NABERSStaging",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "createRating",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_GetTransformedRatings]",
								"storedProcedureParameters": {
									"batchid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "SalesforceSink",
								"writeBatchSize": 5000,
								"writeBehavior": "insert",
								"ignoreNullValues": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "building_type",
											"type": "String"
										},
										"sink": {
											"name": "Building_Type__c",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "source_rating_id"
										},
										"sink": {
											"name": "NO_Member_Rating_Id__c"
										}
									},
									{
										"source": {
											"name": "assessor_email"
										},
										"sink": {
											"name": "Assessor_Email__c"
										}
									},
									{
										"source": {
											"name": "customer_email"
										},
										"sink": {
											"name": "Customer_Email__c"
										}
									},
									{
										"source": {
											"name": "cert_building_name"
										},
										"sink": {
											"name": "Building_Name_On_Certificate__c"
										}
									},
									{
										"source": {
											"name": "cert_customer_name"
										},
										"sink": {
											"name": "Customer_Name_On_Certificate__c"
										}
									},
									{
										"source": {
											"name": "cert_valid_from"
										},
										"sink": {
											"name": "Valid_From_Date__c"
										}
									},
									{
										"source": {
											"name": "cert_valid_to"
										},
										"sink": {
											"name": "Valid_To_Date__c"
										}
									},
									{
										"source": {
											"name": "status"
										},
										"sink": {
											"name": "Status__c"
										}
									},
									{
										"source": {
											"name": "period_from"
										},
										"sink": {
											"name": "Rating_Start_Date__c"
										}
									},
									{
										"source": {
											"name": "has_cinema"
										},
										"sink": {
											"name": "hasCinema__c"
										}
									},
									{
										"source": {
											"name": "rating_ref_number"
										},
										"sink": {
											"name": "NO_Member_Rating_Ref_Number__c"
										}
									},
									{
										"source": {
											"name": "lodged_date"
										},
										"sink": {
											"name": "Lodge_Date__c"
										}
									},
									{
										"source": {
											"name": "rating_main_purpose"
										},
										"sink": {
											"name": "Main_purpose_of_rating__c"
										}
									},
									{
										"source": {
											"name": "publicly_listed"
										},
										"sink": {
											"name": "Rating_Publicly_Listed__c"
										}
									},
									{
										"source": {
											"name": "rating_type"
										},
										"sink": {
											"name": "Rating_Type__c"
										}
									},
									{
										"source": {
											"name": "rating_scope"
										},
										"sink": {
											"name": "Rating_Scope__c"
										}
									},
									{
										"source": {
											"name": "sf_assessor_id"
										},
										"sink": {
											"name": "OwnerId"
										}
									},
									{
										"source": {
											"name": "sf_company_id"
										},
										"sink": {
											"name": "Customer__c"
										}
									},
									{
										"source": {
											"name": "sf_officer_id"
										},
										"sink": {
											"name": "Tech_Officer__c"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "db_transformed_ratings",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "sf_Ratings",
								"type": "DatasetReference"
							}
						]
					}
				],
				"parameters": {
					"pbatch_id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_transformed_ratings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_members_rating')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NABERSStaging",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "RatingHeaderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RatingReferenceNumber",
						"type": "varchar"
					},
					{
						"name": "PremiseTypeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PremiseType",
						"type": "varchar"
					},
					{
						"name": "PremiseID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PremiseName",
						"type": "varchar"
					},
					{
						"name": "AssessorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AssessorEmail",
						"type": "varchar"
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					},
					{
						"name": "Customer_TradingName",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_StreeNumber",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_StreetName",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_Suburb",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_Postcode",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_State",
						"type": "varchar"
					},
					{
						"name": "RatingPeriodFrom",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "RatingPeriodTo",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PublicListingFlag",
						"type": "bit"
					},
					{
						"name": "OfficerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RatingStatusID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RatingStatus",
						"type": "varchar"
					},
					{
						"name": "LodgedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PaymentStatusID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentStatus",
						"type": "varchar"
					},
					{
						"name": "PaidDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CertificateValidFrom",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CertificateValidTo",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PremiseNameOnCert",
						"type": "varchar"
					},
					{
						"name": "CustomerNameOnCert",
						"type": "varchar"
					},
					{
						"name": "Certificate_Customer_Email",
						"type": "varchar"
					},
					{
						"name": "ReplaceFlag",
						"type": "bit"
					},
					{
						"name": "RenewFlag",
						"type": "bit"
					},
					{
						"name": "PreviousRatingHeaderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NewRatingHeaderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StreetNumber",
						"type": "varchar"
					},
					{
						"name": "StreetName",
						"type": "varchar"
					},
					{
						"name": "Suburb",
						"type": "varchar"
					},
					{
						"name": "Postcode",
						"type": "varchar"
					},
					{
						"name": "State",
						"type": "varchar"
					},
					{
						"name": "batch_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RatingTypes",
						"type": "varchar"
					},
					{
						"name": "RatingMainPurpose",
						"type": "varchar"
					},
					{
						"name": "HasCinema",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "RatingHeaderStage"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_transformed_ratings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NABERSStaging",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "source_rating_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "building_type",
						"type": "varchar"
					},
					{
						"name": "sf_company_id",
						"type": "varchar"
					},
					{
						"name": "sf_building_id",
						"type": "varchar"
					},
					{
						"name": "batch_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "sf_rating_id",
						"type": "varchar"
					},
					{
						"name": "sf_assessor_id",
						"type": "varchar"
					},
					{
						"name": "assessor_email",
						"type": "varchar"
					},
					{
						"name": "customer_email",
						"type": "varchar"
					},
					{
						"name": "cert_building_name",
						"type": "varchar"
					},
					{
						"name": "cert_customer_name",
						"type": "varchar"
					},
					{
						"name": "rating_type",
						"type": "varchar"
					},
					{
						"name": "rating_main_purpose",
						"type": "varchar"
					},
					{
						"name": "has_cinema",
						"type": "bit"
					},
					{
						"name": "period_from",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "period_to",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "status",
						"type": "varchar"
					},
					{
						"name": "cert_valid_from",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "cert_valid_to",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "rating_ref_number",
						"type": "varchar"
					},
					{
						"name": "lodged_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "rating_scope",
						"type": "varchar"
					},
					{
						"name": "publicly_listed",
						"type": "bit"
					},
					{
						"name": "sf_officer_id",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Transformed_Ratings"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_Transform_Company_Assessor')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db_lookup_sf_company_ids",
								"type": "DatasetReference"
							},
							"name": "getCompany"
						},
						{
							"dataset": {
								"referenceName": "db_lookup_sf_assessors_ids",
								"type": "DatasetReference"
							},
							"name": "getAssessor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "db_lookup_sf_assessors_ids",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tid as integer,\n\t\tsalesforce_company_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_company_id as integer,\n\t\tMailing_Country as string,\n\t\tBilling_Country as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getCompany\nsource(output(\n\t\tid as integer,\n\t\tsalesforce_assessor_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_assessor_id as integer,\n\t\tsalesforce_company_id as string,\n\t\tmember_company_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getAssessor\ngetAssessor, getCompany join(getAssessor@member_company_id == getCompany@member_company_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nJoin1 alterRow(updateIf(isNull(getAssessor@salesforce_company_id))) ~> AlterRow1\nAlterRow1 sink(input(\n\t\tid as integer,\n\t\tsalesforce_assessor_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_assessor_id as integer,\n\t\tsalesforce_company_id as string,\n\t\tmember_company_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tsalesforce_company_id = getCompany@salesforce_company_Id,\n\t\tid = getAssessor@id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_Transform_Rating')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db_members_rating",
								"type": "DatasetReference"
							},
							"name": "getRatings"
						},
						{
							"dataset": {
								"referenceName": "db_lookup_sf_buildings_ids",
								"type": "DatasetReference"
							},
							"name": "getLookupSalesforceBuildings"
						},
						{
							"dataset": {
								"referenceName": "db_lookup_sf_assessors_ids",
								"type": "DatasetReference"
							},
							"name": "getLookupSalesforceAssessors"
						},
						{
							"dataset": {
								"referenceName": "db_lookup_sf_officer_ids",
								"type": "DatasetReference"
							},
							"name": "getLookupSalesforceTechOfficer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "db_transformed_ratings",
								"type": "DatasetReference"
							},
							"name": "dumpToSFTransofrmedRatings"
						}
					],
					"transformations": [
						{
							"name": "filterBatchRatings"
						},
						{
							"name": "joinLookupSalesforceBuilding"
						},
						{
							"name": "filterSFBuildingByBatch"
						},
						{
							"name": "joinLookupSalesforceAssessors"
						},
						{
							"name": "filterSFAssessorsByBatch"
						},
						{
							"name": "ratingScope"
						},
						{
							"name": "filterSFOfficerByBatch"
						},
						{
							"name": "joinLookupSalesforceUsers"
						}
					],
					"script": "parameters{\n\tpbatch_id as integer (1)\n}\nsource(output(\n\t\tRatingHeaderID as integer,\n\t\tRatingReferenceNumber as string,\n\t\tPremiseTypeID as integer,\n\t\tPremiseType as string,\n\t\tPremiseID as integer,\n\t\tPremiseName as string,\n\t\tAssessorID as integer,\n\t\tAssessorEmail as string,\n\t\tCustomer_Name as string,\n\t\tCustomer_TradingName as string,\n\t\tCustomer_Mailing_StreeNumber as string,\n\t\tCustomer_Mailing_StreetName as string,\n\t\tCustomer_Mailing_Suburb as string,\n\t\tCustomer_Mailing_Postcode as string,\n\t\tCustomer_Mailing_State as string,\n\t\tRatingPeriodFrom as timestamp,\n\t\tRatingPeriodTo as timestamp,\n\t\tPublicListingFlag as boolean,\n\t\tOfficerID as integer,\n\t\tRatingStatusID as integer,\n\t\tRatingStatus as string,\n\t\tLodgedDate as timestamp,\n\t\tPaymentStatusID as integer,\n\t\tPaymentStatus as string,\n\t\tPaidDate as timestamp,\n\t\tCertificateValidFrom as timestamp,\n\t\tCertificateValidTo as timestamp,\n\t\tPremiseNameOnCert as string,\n\t\tCustomerNameOnCert as string,\n\t\tCertificate_Customer_Email as string,\n\t\tReplaceFlag as boolean,\n\t\tRenewFlag as boolean,\n\t\tPreviousRatingHeaderID as integer,\n\t\tNewRatingHeaderID as integer,\n\t\tStreetNumber as string,\n\t\tStreetName as string,\n\t\tSuburb as string,\n\t\tPostcode as string,\n\t\tState as string,\n\t\tbatch_id as integer,\n\t\tRatingTypes as string,\n\t\tRatingMainPurpose as string,\n\t\tHasCinema as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_COMMITTED',\n\tformat: 'table') ~> getRatings\nsource(output(\n\t\tid as integer,\n\t\tsalesforce_building_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_premise_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getLookupSalesforceBuildings\nsource(output(\n\t\tid as integer,\n\t\tsalesforce_assessor_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_assessor_id as integer,\n\t\tsalesforce_company_id as string,\n\t\tmember_company_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getLookupSalesforceAssessors\nsource(output(\n\t\tid as integer,\n\t\tsalesforce_user_Id as string,\n\t\tmember_officer_id as integer,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getLookupSalesforceTechOfficer\ngetRatings filter(equals(batch_id, $pbatch_id)) ~> filterBatchRatings\njoinLookupSalesforceAssessors, filterSFBuildingByBatch join(PremiseID == member_premise_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinLookupSalesforceBuilding\ngetLookupSalesforceBuildings filter(equals(batch_id,  $pbatch_id)) ~> filterSFBuildingByBatch\nratingScope, filterSFAssessorsByBatch join(AssessorID == member_assessor_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinLookupSalesforceAssessors\ngetLookupSalesforceAssessors filter(equals(batch_id,  $pbatch_id)) ~> filterSFAssessorsByBatch\nfilterBatchRatings derive(D_Rating_Scope = iif(equalsIgnoreCase(PremiseType, 'shopping centre'), 'Not applicable', ''),\n\t\tD_Main_Purpose_Of_Rating = iif(equalsIgnoreCase(PremiseName, 'shopping centre'), 'None of the above (NABERS voluntary rating)', '')) ~> ratingScope\ngetLookupSalesforceTechOfficer filter(equals(batch_id, $pbatch_id)) ~> filterSFOfficerByBatch\njoinLookupSalesforceBuilding, filterSFOfficerByBatch join(OfficerID == member_officer_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinLookupSalesforceUsers\njoinLookupSalesforceUsers sink(input(\n\t\tid as integer,\n\t\tsource_rating_id as integer,\n\t\tbuilding_type as string,\n\t\tsf_company_id as string,\n\t\tsf_building_id as string,\n\t\tbatch_id as integer,\n\t\tsf_rating_id as string,\n\t\tsf_assessor_id as string,\n\t\tassessor_email as string,\n\t\tcustomer_email as string,\n\t\tcert_building_name as string,\n\t\tcert_customer_name as string,\n\t\trating_type as string,\n\t\trating_main_purpose as string,\n\t\thas_cinema as boolean,\n\t\tperiod_from as timestamp,\n\t\tperiod_to as timestamp,\n\t\tstatus as string,\n\t\tcert_valid_from as timestamp,\n\t\tcert_valid_to as timestamp,\n\t\trating_ref_number as string,\n\t\tlodged_date as timestamp,\n\t\trating_scope as string,\n\t\tpublicly_listed as boolean,\n\t\tsf_officer_id as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tsource_rating_id = RatingHeaderID,\n\t\tbuilding_type = PremiseType,\n\t\tsf_building_id = salesforce_building_Id,\n\t\tbatch_id = getRatings@batch_id,\n\t\tsf_assessor_id = salesforce_assessor_Id,\n\t\tassessor_email = AssessorEmail,\n\t\tcustomer_email = Certificate_Customer_Email,\n\t\tcert_building_name = PremiseNameOnCert,\n\t\tcert_customer_name = CustomerNameOnCert,\n\t\tstatus = RatingStatus,\n\t\tperiod_from = RatingPeriodFrom,\n\t\tperiod_to = RatingPeriodTo,\n\t\tcert_valid_from = CertificateValidFrom,\n\t\tcert_valid_to = CertificateValidTo,\n\t\thas_cinema = HasCinema,\n\t\trating_type = RatingTypes,\n\t\trating_main_purpose = D_Main_Purpose_Of_Rating,\n\t\trating_ref_number = RatingReferenceNumber,\n\t\tlodged_date = LodgedDate,\n\t\trating_scope = D_Rating_Scope,\n\t\tpublicly_listed = PublicListingFlag,\n\t\tsf_officer_id = salesforce_user_Id,\n\t\tsf_company_id = salesforce_company_id\n\t),\n\tskipDuplicateMapOutputs: true) ~> dumpToSFTransofrmedRatings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_members_rating')]",
				"[concat(variables('factoryId'), '/datasets/db_lookup_sf_officer_ids')]",
				"[concat(variables('factoryId'), '/datasets/db_transformed_ratings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sf_users')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NabersOnline",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "salesforce"
				},
				"annotations": [],
				"type": "SalesforceObject",
				"schema": [],
				"typeProperties": {
					"objectApiName": "User"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_lookup_sf_officer_ids')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NABERSStaging",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pbatch_id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "salesforce_user_Id",
						"type": "varchar"
					},
					{
						"name": "member_officer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "batch_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "created_on",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Lookup_SalesforceUsers"
				}
			},
			"dependsOn": []
		}
	]
}