{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "nabers-data-sync"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/01d Create Assessors In Salesforce')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "createNotFoundAssessors",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_GetAssessorToCreateInSalesForce]",
								"storedProcedureParameters": {
									"batchid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "SalesforceSink",
								"writeBatchSize": 5000,
								"writeBehavior": "insert",
								"ignoreNullValues": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Phone",
											"type": "String"
										},
										"sink": {
											"name": "Phone",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Email",
											"type": "String"
										},
										"sink": {
											"name": "Email",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AccreditationExpiryDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "NO_Accreditation_Expiry_Date__c",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "AccreditationNumber",
											"type": "String"
										},
										"sink": {
											"name": "NO_Accreditation_Number__c",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "JoinedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "NO_Join_date__c",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "accredition"
										},
										"sink": {
											"name": "NO_Accreditation__c",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "metropolitan_cleaned"
										},
										"sink": {
											"name": "NO_Metropolitan__c",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "member_assessor_id"
										},
										"sink": {
											"name": "NO_Id_In_Member__c",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "salesforce_company_id"
										},
										"sink": {
											"name": "AccountId",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FirstName"
										},
										"sink": {
											"name": "FirstName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LastName"
										},
										"sink": {
											"name": "LastName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Title"
										},
										"sink": {
											"name": "Salutation",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "cleaned_mailing_streetname"
										},
										"sink": {
											"name": "MailingStreet",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Mailing_Suburb"
										},
										"sink": {
											"name": "MailingCity",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Mailing_State"
										},
										"sink": {
											"name": "MailingState",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Mailing_Postcode"
										},
										"sink": {
											"name": "MailingPostalCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "mailing_country"
										},
										"sink": {
											"name": "MailingCountry",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Billing_StreetName"
										},
										"sink": {
											"name": "OtherStreet",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Billing_Suburb"
										},
										"sink": {
											"name": "OtherCity",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Billing_State"
										},
										"sink": {
											"name": "OtherState",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Billing_Postcode"
										},
										"sink": {
											"name": "OtherPostalCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "billing_country"
										},
										"sink": {
											"name": "OtherCountry",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "rating_type"
										},
										"sink": {
											"name": "NO_Rating_Types__c"
										}
									},
									{
										"source": {
											"name": "salesforce_contact_type"
										},
										"sink": {
											"name": "RecordTypeId"
										}
									},
									{
										"source": {
											"name": "salesforce_portal_access"
										},
										"sink": {
											"name": "Portal_Access__c"
										}
									},
									{
										"source": {
											"name": "salesforce_user_active"
										},
										"sink": {
											"name": "NO_User_Status__c"
										}
									},
									{
										"source": {
											"name": "regional_cleaned"
										},
										"sink": {
											"name": "NO_Regional__c"
										}
									},
									{
										"source": {
											"name": "Mobile"
										},
										"sink": {
											"name": "MobilePhone"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "db_stage_assessors",
								"type": "DatasetReference",
								"parameters": {
									"pBatch_Id": "@pipeline().parameters.pbatch_id"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sf_contacts",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Update Batch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LogBatchDetails]",
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.pbatch_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"process_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"stage": {
									"value": "In Progress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NABERSStaging",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "usp_GetSalesforce",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "createNotFoundAssessors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_GetAssessorToCreateInSalesForce]",
								"storedProcedureParameters": {
									"batchid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "db_members_rating",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "forEachRow",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "waitForFewSecondsToAllowSFToCreateUser",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('_vnewBuildingsInSF')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Lookup Member by Member Id In Salesforce",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "Select id from Contact\nwhere NO_Id_In_Member__c = @{item().member_assessor_id}",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "sf_contacts",
											"type": "DatasetReference"
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "UpdateNewSalesforceIdForBuilding",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Lookup Member by Member Id In Salesforce",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Lookup Assessor in User by Email Id In Salesforce",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_UpdateNewSalesforceIdForAssessor]",
										"storedProcedureParameters": {
											"batch_id": {
												"value": {
													"value": "@pipeline().parameters.pbatch_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"member_assessor_id": {
												"value": {
													"value": "@item().member_assessor_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"salesforce_assessor_Id": {
												"value": {
													"value": "@activity('Lookup Member by Member Id In Salesforce').output.firstrow.Id",
													"type": "Expression"
												},
												"type": "String"
											},
											"salesforce_user_id": {
												"value": {
													"value": "@activity('Lookup Assessor in User by Email Id In Salesforce').output.firstrow.Id",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "NABERSStaging",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Lookup Assessor in User by Email Id In Salesforce",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "Select id from User\nwhere Email like '%@{item().Email}%'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "sf_contacts",
											"type": "DatasetReference"
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "Set Variable Rating",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "usp_GetSalesforce",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_vnewBuildingsInSF",
							"value": {
								"value": "@activity('usp_GetSalesforce').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "markAssessorAsUsersToInActive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "forEachRow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_GetNewAssessorToMarkUserInactiveInSalesForce]",
								"storedProcedureParameters": {
									"batchid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "SalesforceSink",
								"writeBatchSize": 5000,
								"writeBehavior": "upsert",
								"externalIdFieldName": "Email",
								"ignoreNullValues": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Email",
											"type": "String"
										},
										"sink": {
											"name": "Email",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IsActive"
										},
										"sink": {
											"name": "IsActive",
											"type": "Boolean"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "db_stage_assessors",
								"type": "DatasetReference",
								"parameters": {
									"pBatch_Id": "@pipeline().parameters.pbatch_id"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sf_users",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "waitForFewSecondsToAllowSFToCreateUser",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Set Variable Rating",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 6
						}
					}
				],
				"parameters": {
					"pbatch_id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"_defaultPremiseType": {
						"type": "String",
						"defaultValue": "Shopping Centre"
					},
					"_vnewBuildingsInSF": {
						"type": "Array"
					},
					"_vsf_buildingRecord": {
						"type": "String"
					},
					"_vnewBuildingInSF": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_stage_assessors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_stage_assessors')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NABERSStaging",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pBatch_Id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "RatingHeaderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "companyid",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AssessorId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					},
					{
						"name": "Title",
						"type": "varchar"
					},
					{
						"name": "Mailing_StreetNumber",
						"type": "varchar"
					},
					{
						"name": "Mailing_StreetName",
						"type": "varchar"
					},
					{
						"name": "Mailing_Suburb",
						"type": "varchar"
					},
					{
						"name": "Mailing_Postcode",
						"type": "varchar"
					},
					{
						"name": "Mailing_State",
						"type": "varchar"
					},
					{
						"name": "Billing_StreetNumber",
						"type": "varchar"
					},
					{
						"name": "Billing_StreetName",
						"type": "varchar"
					},
					{
						"name": "Billing_Suburb",
						"type": "varchar"
					},
					{
						"name": "Billing_Postcode",
						"type": "varchar"
					},
					{
						"name": "Billing_State",
						"type": "varchar"
					},
					{
						"name": "Phone",
						"type": "varchar"
					},
					{
						"name": "Mobile",
						"type": "varchar"
					},
					{
						"name": "Email",
						"type": "varchar"
					},
					{
						"name": "JoinedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "AccreditationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "AccreditationExpiryDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "AccreditationNumber",
						"type": "varchar"
					},
					{
						"name": "EnergyFlag",
						"type": "bit"
					},
					{
						"name": "WaterFlag",
						"type": "bit"
					},
					{
						"name": "WasteFlag",
						"type": "bit"
					},
					{
						"name": "batch_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RequireSupervisionSC",
						"type": "bit"
					},
					{
						"name": "Metropolitan",
						"type": "nvarchar"
					},
					{
						"name": "Regional",
						"type": "nvarchar"
					},
					{
						"name": "RetailFlag",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HospitalFlag",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HotelFlag",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OfficeFlag",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ApartmentBuildingFlag",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "AssessorsStage"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_Transform_Company_Assessor')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db_lookup_sf_company_ids",
								"type": "DatasetReference"
							},
							"name": "getLookupCompany"
						},
						{
							"dataset": {
								"referenceName": "db_lookup_sf_assessors_ids",
								"type": "DatasetReference"
							},
							"name": "getLookupAssessor"
						},
						{
							"dataset": {
								"referenceName": "db_stage_assessors",
								"type": "DatasetReference"
							},
							"name": "getStageAssessors"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "db_lookup_sf_assessors_ids",
								"type": "DatasetReference"
							},
							"name": "targetLookupSalesforceAssessor"
						},
						{
							"dataset": {
								"referenceName": "db_lookup_sf_assessors_ids",
								"type": "DatasetReference"
							},
							"name": "updateCleanedData"
						}
					],
					"transformations": [
						{
							"name": "joinLookupAssessorCompany"
						},
						{
							"name": "updateIfSalesforceCompanyIdIsEmpty"
						},
						{
							"name": "newRequiredColumns"
						},
						{
							"name": "filterStageAssessorByBatch"
						},
						{
							"name": "joinStagedAssessors"
						},
						{
							"name": "updateOnlyForCurrentBatch"
						},
						{
							"name": "filterLookupCompanyByBatch"
						},
						{
							"name": "filterAssessorByBatch"
						}
					],
					"script": "parameters{\n\tpDefaultCountry as string ('Australia'),\n\tpbatch_id as integer (1),\n\tpActive as string ('Active'),\n\tpPortalAccess as string ('NABERS Online')\n}\nsource(output(\n\t\tid as integer,\n\t\tsalesforce_company_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_company_id as integer,\n\t\tMailing_Country as string,\n\t\tBilling_Country as string,\n\t\tsync_status as string,\n\t\taccount_type as string,\n\t\tsf_record_type as string,\n\t\tmailing_street as string,\n\t\tbilling_street as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getLookupCompany\nsource(output(\n\t\tid as integer,\n\t\tsalesforce_assessor_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_assessor_id as integer,\n\t\tsalesforce_company_id as string,\n\t\tmember_company_id as integer,\n\t\tsync_status as string,\n\t\tmailing_country as string,\n\t\tbilling_country as string,\n\t\taccredition as string,\n\t\trating_type as string,\n\t\tregional_cleaned as string,\n\t\tsalesforce_contact_type as string,\n\t\tsalesforce_portal_access as string,\n\t\tsalesforce_user_active as string,\n\t\tmetropolitan_cleaned as string,\n\t\tsalesforce_user_id as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getLookupAssessor\nsource(output(\n\t\tRatingHeaderID as integer,\n\t\tcompanyid as integer,\n\t\tAssessorId as integer,\n\t\tUserId as integer,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tTitle as string,\n\t\tMailing_StreetNumber as string,\n\t\tMailing_StreetName as string,\n\t\tMailing_Suburb as string,\n\t\tMailing_Postcode as string,\n\t\tMailing_State as string,\n\t\tBilling_StreetNumber as string,\n\t\tBilling_StreetName as string,\n\t\tBilling_Suburb as string,\n\t\tBilling_Postcode as string,\n\t\tBilling_State as string,\n\t\tPhone as string,\n\t\tMobile as string,\n\t\tEmail as string,\n\t\tJoinedDate as timestamp,\n\t\tAccreditationDate as timestamp,\n\t\tAccreditationExpiryDate as timestamp,\n\t\tAccreditationNumber as string,\n\t\tEnergyFlag as boolean,\n\t\tWaterFlag as boolean,\n\t\tWasteFlag as boolean,\n\t\tbatch_id as integer,\n\t\tRequireSupervisionSC as boolean,\n\t\tMetropolitan as string,\n\t\tRegional as string,\n\t\tRetailFlag as integer,\n\t\tHospitalFlag as integer,\n\t\tHotelFlag as integer,\n\t\tOfficeFlag as integer,\n\t\tApartmentBuildingFlag as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getStageAssessors\nfilterAssessorByBatch, filterLookupCompanyByBatch join(getLookupAssessor@member_company_id == getLookupCompany@member_company_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinLookupAssessorCompany\nnewRequiredColumns alterRow(updateIf(isNull(getLookupAssessor@salesforce_company_id)||length(trim(getLookupAssessor@salesforce_company_id))==0)) ~> updateIfSalesforceCompanyIdIsEmpty\njoinStagedAssessors derive(D_DefaultMailingCountry = $pDefaultCountry,\n\t\tD_DefaultBillingCountry = $pDefaultCountry,\n\t\tD_RatingTypes = iif(true() == EnergyFlag, 'Energy', '')\r\n+ iif(true() == WaterFlag, iif(true() == EnergyFlag, '; Water', 'Water'), ''),\n\t\tD_Accredition = iif(1 == RetailFlag, 'Shopping Centre', '')\r\n+ iif(1 == HotelFlag, iif(1 == RetailFlag, '; Hotel', 'Hotel'), '')\r\n+ iif(1 == OfficeFlag, iif(1 == RetailFlag || 1 == HotelFlag, '; Office', 'Office'), '')\r\n+ iif(1 == ApartmentBuildingFlag, iif(1 == RetailFlag || 1 == HotelFlag || 1 == OfficeFlag, '; Apartment Building', 'Apartment Building'), '')\r\n+ iif(1 == HospitalFlag, iif(1 == RetailFlag || 1 == HotelFlag || 1 == OfficeFlag|| 1 == ApartmentBuildingFlag, '; Public Hospital', 'Public Hospital'), ''),\n\t\tD_Regional_Cleaned = replace(replace(iif(isNull(Regional), replace(replace(Metropolitan, ';INTERNATIONAL', ''),'INTERNATIONAL', ''), Regional), ';ACT', ''), 'ACT', ''),\n\t\tD_Metropolitan_Cleaned = replace(replace(Metropolitan, ';INTERNATIONAL', ''),'INTERNATIONAL', ''),\n\t\tD_Salesforce_User_Active = $pActive,\n\t\tD_Mailing_StreetName = coalesce(Mailing_StreetName, Billing_StreetName),\n\t\tD_Billing_Street = coalesce(Billing_StreetNumber, '') + ' ' + coalesce(Billing_StreetName, ''),\n\t\tD_Mailing_Street = coalesce(Mailing_StreetNumber, '') + ' ' + coalesce(Mailing_StreetName, ''),\n\t\tD_Portal_Access = $pPortalAccess) ~> newRequiredColumns\ngetStageAssessors filter(equals(batch_id, $pbatch_id)) ~> filterStageAssessorByBatch\njoinLookupAssessorCompany, filterStageAssessorByBatch join(member_assessor_id == AssessorId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinStagedAssessors\nnewRequiredColumns alterRow(updateIf(equals($pbatch_id,getLookupAssessor@batch_id))) ~> updateOnlyForCurrentBatch\ngetLookupCompany filter(equals($pbatch_id, batch_id) && equals(account_type, 'company')) ~> filterLookupCompanyByBatch\ngetLookupAssessor filter(equals($pbatch_id, batch_id)) ~> filterAssessorByBatch\nupdateIfSalesforceCompanyIdIsEmpty sink(input(\n\t\tid as integer,\n\t\tsalesforce_assessor_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_assessor_id as integer,\n\t\tsalesforce_company_id as string,\n\t\tmember_company_id as integer,\n\t\tsync_status as string,\n\t\tmailing_country as string,\n\t\tbilling_country as string,\n\t\taccredition as string,\n\t\trating_type as string,\n\t\tregional_cleaned as string,\n\t\tsalesforce_contact_type as string,\n\t\tsalesforce_portal_access as string,\n\t\tsalesforce_user_active as string,\n\t\tmetropolitan_cleaned as string,\n\t\tsalesforce_user_id as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tsalesforce_company_id = getLookupCompany@salesforce_company_Id,\n\t\tid = getLookupAssessor@id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> targetLookupSalesforceAssessor\nupdateOnlyForCurrentBatch sink(input(\n\t\tid as integer,\n\t\tsalesforce_assessor_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_assessor_id as integer,\n\t\tsalesforce_company_id as string,\n\t\tmember_company_id as integer,\n\t\tsync_status as string,\n\t\tmailing_country as string,\n\t\tbilling_country as string,\n\t\taccredition as string,\n\t\trating_type as string,\n\t\tregional_cleaned as string,\n\t\tsalesforce_contact_type as string,\n\t\tsalesforce_portal_access as string,\n\t\tsalesforce_user_active as string,\n\t\tmetropolitan_cleaned as string,\n\t\tsalesforce_user_id as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tmailing_country = D_DefaultMailingCountry,\n\t\tbilling_country = D_DefaultBillingCountry,\n\t\trating_type = D_RatingTypes,\n\t\taccredition = D_Accredition,\n\t\tregional_cleaned = D_Regional_Cleaned,\n\t\tid = getLookupAssessor@id,\n\t\tsalesforce_user_active = D_Salesforce_User_Active,\n\t\tsalesforce_portal_access = D_Portal_Access,\n\t\tmetropolitan_cleaned = D_Metropolitan_Cleaned\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> updateCleanedData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_stage_assessors')]"
			]
		}
	]
}