{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "nabers-data-sync"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/00 Start Batch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "usp_StartBatch",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_StartBatch]",
								"storedProcedureParameters": {
									"process_name": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "db_members_rating",
								"type": "DatasetReference"
							}
						}
					},
					{
						"name": "Batch Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "usp_StartBatch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "vbatch_id",
							"value": {
								"value": "@string(activity('usp_StartBatch').output.firstRow.NewBatchId)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "01 Pull From Staging",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Batch Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "01 Pull Members Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pbatch_id": {
									"value": "@activity('usp_StartBatch').output.firstRow.NewBatchId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "01b Transform",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "01a Create Building",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "01a Create Assessors",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "01a Create Customers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "01b Transform Ratings",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pbatch_id": {
									"value": "@variables('vbatch_id')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "01a Create Building",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "01 Pull From Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "01a Create Building In Salesforce",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pbatch_id": {
									"value": "@variables('vbatch_id')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "02 Create Ratings",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "01b Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "02 Create Ratings",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pbatch_id": {
									"value": "@variables('vbatch_id')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "03 Junction Building Rating",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "02 Create Ratings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "03 Junction Building Rating",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pbatch_id": {
									"value": "@variables('vbatch_id')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "01a Create Assessors",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "01a Transform Company Assessor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "01a Create Assessors In Salesforce",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pbatch_id": {
									"value": "@variables('vbatch_id')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "01a Create Company",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "01a Transform Country Attibutes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "01a Create Company In Salesforce",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pbatch_id": {
									"value": "@variables('vbatch_id')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "01a Transform Company Assessor",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "01a Create Company",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "01b Transform Company Assessors",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pbatch_id": {
									"value": "@variables('vbatch_id')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "01a Transform Country Attibutes",
						"description": "Placeholder for missing mailing and billing country",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "01 Pull From Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "01b Transform Country in Building",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pbatch_id": {
									"value": "@variables('vbatch_id')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "01a Create Customers",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "01a Transform Country Attibutes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "01a Create Customer In Salesforce",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pbatch_id": {
									"value": "@variables('vbatch_id')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"variables": {
					"vbatch_id": {
						"type": "String",
						"defaultValue": "1"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_members_rating')]",
				"[concat(variables('factoryId'), '/pipelines/01 Pull Members Data')]",
				"[concat(variables('factoryId'), '/pipelines/02 Create Ratings')]",
				"[concat(variables('factoryId'), '/pipelines/01a Create Customer In Salesforce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/01 Pull Members Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "forEachRating",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "usp_GetRating",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('usp_GetRating').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Lookup Each Building by Address In Salesforce",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "Select id from NO_Building__c \nwhere Postcode__c = '@{item().Postcode}'\nand State__c = '@{item().State}'\nand Suburb__c = '@{item().Suburb}'\nand Street_Number__c = '@{item().StreetNumber}'\nand Street_Name__c = '@{item().StreetName}'\nand Name = '@{item().PremiseName}'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "sf_Buildings",
											"type": "DatasetReference"
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If Building In Salesforce Exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup Each Building by Address In Salesforce",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(string(activity('Lookup Each Building by Address In Salesforce').output), 'firstRow')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "insertPremiseDetails",
												"description": "Building does not exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupBuildingData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_premise_id": {
															"value": {
																"value": "@item().PremiseID",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"salesforce_building_Id": {
															"value": "",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "insertPremiseDetailsWithSalesForceId",
												"description": "Building does exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupBuildingData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_premise_id": {
															"value": {
																"value": "@item().PremiseID",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"salesforce_building_Id": {
															"value": {
																"value": "@activity('Lookup Each Building by Address In Salesforce').output.firstrow.Id",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Lookup Each Assessor by Email In Salesforce",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get Assessor Details by Assessor ID",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "Select id from Contact\nwhere Email= '@{activity('Get Assessor Details by Assessor ID').output.firstRow.Email}'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "sf_contacts",
											"type": "DatasetReference"
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If Assessor In Salesforce Exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup Each Assessor by Email In Salesforce",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(string(activity('Lookup Each Assessor by Email In Salesforce').output), 'firstRow')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "insertAssessorDetails",
												"description": "Building does not exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Get Salesforce Contact Type",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupAssessorData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_assessor_Id": {
															"value": {
																"value": "@activity('Get Assessor Details by Assessor ID').output.firstrow.AssessorId",
																"type": "Expression"
															},
															"type": "String"
														},
														"salesforce_assessor_Id": {
															"value": null,
															"type": "String"
														},
														"member_company_id": {
															"value": {
																"value": "@activity('Get Assessor Details by Assessor ID').output.firstrow.CompanyId",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"salesforce_contact_type": {
															"value": {
																"value": "@activity('Get Salesforce Contact Type').output.firstrow.Id",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Get Salesforce Contact Type",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SalesforceSource",
														"query": {
															"value": "Select id from RecordType where sObjectType = 'Contact' and DeveloperName = 'NO_Assessor'",
															"type": "Expression"
														},
														"readBehavior": "query"
													},
													"dataset": {
														"referenceName": "sf_contacts",
														"type": "DatasetReference"
													},
													"firstRowOnly": true
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "insertAssessorDetailsWithSalesForceId",
												"description": "Building does exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupAssessorData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_assessor_Id": {
															"value": {
																"value": "@activity('Get Assessor Details by Assessor ID').output.firstRow.AssessorID",
																"type": "Expression"
															},
															"type": "String"
														},
														"salesforce_assessor_Id": {
															"value": {
																"value": "@activity('Lookup Each Assessor by Email In Salesforce').output.firstRow.Id",
																"type": "Expression"
															},
															"type": "String"
														},
														"member_company_id": {
															"value": {
																"value": "@activity('Get Assessor Details by Assessor ID').output.firstRow.CompanyId",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Lookup Each Company by ABN In Salesforce",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get Company Details by Company Id",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "Select id from Account\nwhere NO_ABN__c = '@{activity('Get Company Details by Company Id').output.firstRow.ABN}'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "sf_company",
											"type": "DatasetReference"
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If Company In Salesforce Exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup Each Company by ABN In Salesforce",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(string(activity('Lookup Each Company by ABN In Salesforce').output), 'firstRow')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "insertCompanyDetails",
												"description": "Company does not exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Lookup Company Record Type",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupCompanyData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_company_Id": {
															"value": {
																"value": "@activity('Get Company Details by Company Id').output.firstrow.CompanyId",
																"type": "Expression"
															},
															"type": "String"
														},
														"salesforce_company_Id": {
															"value": null,
															"type": "String"
														},
														"account_type": {
															"value": "company",
															"type": "String"
														},
														"sf_record_type": {
															"value": {
																"value": "@activity('Lookup Company Record Type').output.firstRow.Id",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Lookup Company Record Type",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SalesforceSource",
														"query": {
															"value": "Select Id from RecordType where Name = 'Assessor Company'",
															"type": "Expression"
														},
														"readBehavior": "query"
													},
													"dataset": {
														"referenceName": "sf_Buildings",
														"type": "DatasetReference"
													},
													"firstRowOnly": true
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "insertCompanyDetailswithSalesforceIdx",
												"description": "Company does exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupCompanyData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_company_Id": {
															"value": {
																"value": "@activity('Get Company Details by Company Id').output.firstrow.CompanyId",
																"type": "Expression"
															},
															"type": "String"
														},
														"salesforce_company_Id": {
															"value": {
																"value": "@activity('Lookup Each Company by ABN In Salesforce').output.firstrow.Id",
																"type": "Expression"
															},
															"type": "String"
														},
														"account_type": {
															"value": "company",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Get Assessor Details by Assessor ID",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Select Top 1 * from AssessorsStage where AssessorId = '@{item().AssessorId}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "db_stage_assessors",
											"type": "DatasetReference",
											"parameters": {
												"pBatch_Id": {
													"value": "@pipeline().parameters.pbatch_id",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Get Company Details by Company Id",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Select Top 1 * from CompanyStage where CompanyId = @{item().CompanyId}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "db_company",
											"type": "DatasetReference"
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If Officer Id is not null or empty",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(empty(string(item().OfficerId)))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Insert Anomaly",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertDataSyncAnomalies]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"process_name": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"anomaly_desc": {
															"value": {
																"value": "No Tech Officer found for this Rating header. Ignoring",
																"type": "Expression"
															},
															"type": "String"
														},
														"anomaly_type": {
															"value": "Warning",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Get Tech Officer Details by Officer Id",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "Select Top 1 * from TechOfficersStage where [AdministratorID]= @{item().OfficerId}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"dataset": {
														"referenceName": "db_company",
														"type": "DatasetReference"
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "Lookup Each Tech Officer by Email In Salesforce",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Get Tech Officer Details by Officer Id",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SalesforceSource",
														"query": {
															"value": "Select id from User\nwhere Email like '%@{activity('Get Tech Officer Details by Officer Id').output.firstrow.Email}%'",
															"type": "Expression"
														},
														"readBehavior": "query"
													},
													"dataset": {
														"referenceName": "sf_users",
														"type": "DatasetReference"
													},
													"firstRowOnly": true
												}
											},
											{
												"name": "insertOfficerDetailsWithSalesForceId",
												"description": "Company does exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Lookup Each Tech Officer by Email In Salesforce",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[usp_InsertLookupTechOfficerData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_officer_Id": {
															"value": {
																"value": "@item().OfficerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"salesforce_user_Id": {
															"value": {
																"value": "@activity('Lookup Each Tech Officer by Email In Salesforce').output.firstrow.Id",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Lookup Each Customer by ABN In Salesforce",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "Select id from Account\nwhere NO_ABN__c = '@{item().Customer_ABN}'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "sf_company",
											"type": "DatasetReference"
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If Customer In Salesforce Exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup Each Customer by ABN In Salesforce",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(string(activity('Lookup Each Customer by ABN In Salesforce').output), 'firstRow')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "insertCustomerDetailsFalse",
												"description": "Company does not exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Lookup Customer Record Type",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupCompanyData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_company_Id": {
															"value": {
																"value": "@item().customer_id",
																"type": "Expression"
															},
															"type": "String"
														},
														"salesforce_company_Id": {
															"value": null,
															"type": "String"
														},
														"account_type": {
															"value": "customer",
															"type": "String"
														},
														"sf_record_type": {
															"value": {
																"value": "@activity('Lookup Customer Record Type').output.firstRow.Id",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Lookup Customer Record Type",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SalesforceSource",
														"query": {
															"value": "Select Id from RecordType where Name = 'Customer / Industry Company'",
															"type": "Expression"
														},
														"readBehavior": "query"
													},
													"dataset": {
														"referenceName": "sf_Buildings",
														"type": "DatasetReference"
													},
													"firstRowOnly": true
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "insertCustomerDetailswithSalesforceId",
												"description": "Company does exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupCompanyData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_company_Id": {
															"value": {
																"value": "@item().customer_id",
																"type": "Expression"
															},
															"type": "String"
														},
														"salesforce_company_Id": {
															"value": {
																"value": "@activity('Lookup Each Customer by ABN In Salesforce').output.firstrow.Id",
																"type": "Expression"
															},
															"type": "String"
														},
														"account_type": {
															"value": "customer",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "usp_GetRating",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_GetRating]",
								"storedProcedureParameters": {
									"batchid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "db_members_rating",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Update Batch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LogBatchDetails]",
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.pbatch_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"process_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"stage": {
									"value": "In Progress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NABERSStaging",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "usp_GetCustomerContact",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[usp_GetCustomerContact]",
								"storedProcedureParameters": {
									"batchid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									},
									"customerId": {
										"type": "Int32",
										"value": null
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "db_members_rating",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "forEachCustomerContact",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "usp_GetCustomerContact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('usp_GetCustomerContact').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Lookup Each Customer Contact by Email In Salesforce",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "Select id from Contact\nwhere Email = '@{item().Email}'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "sf_company",
											"type": "DatasetReference"
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "If Customer Contact In Salesforce Exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup Each Customer Contact by Email In Salesforce",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(string(activity('Lookup Each Customer Contact by Email In Salesforce').output), 'firstRow')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "insertCustomerContactDetailsFalse",
												"description": "Company does not exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Lookup Customer Contact Record Type",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupCompanyData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_company_Id": {
															"value": {
																"value": "@item().customer_id",
																"type": "Expression"
															},
															"type": "String"
														},
														"salesforce_company_Id": {
															"value": null,
															"type": "String"
														},
														"account_type": {
															"value": "customer contact",
															"type": "String"
														},
														"sf_record_type": {
															"value": {
																"value": "@activity('Lookup Customer Contact Record Type').output.firstRow.Id",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Lookup Customer Contact Record Type",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SalesforceSource",
														"query": {
															"value": "Select Id from RecordType where Name = 'Customer/Industry Contact'",
															"type": "Expression"
														},
														"readBehavior": "query"
													},
													"dataset": {
														"referenceName": "sf_Buildings",
														"type": "DatasetReference"
													},
													"firstRowOnly": true
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "insertCustomerContactDetailswithSalesforceId",
												"description": "Company does exist",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[usp_InsertLookupCompanyData]",
													"storedProcedureParameters": {
														"batch_id": {
															"value": {
																"value": "@pipeline().parameters.pbatch_id",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"member_company_Id": {
															"value": {
																"value": "@item().CustomerContactId",
																"type": "Expression"
															},
															"type": "String"
														},
														"salesforce_company_Id": {
															"value": {
																"value": "@activity('Lookup Each Customer Contact by Email In Salesforce').output.firstrow.Id",
																"type": "Expression"
															},
															"type": "String"
														},
														"account_type": {
															"value": "customer contact",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "NABERSStaging",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"parameters": {
					"pbatch_id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"_vratings": {
						"type": "Array"
					},
					"_vsf_buildingRecord": {
						"type": "Array"
					},
					"_vcurrentRatingItem": {
						"type": "Array"
					},
					"_vsf_AssessorRecord": {
						"type": "Array"
					},
					"_vsf_CompanyRecord": {
						"type": "Array"
					},
					"_vsf_TechOfficerRecord": {
						"type": "Array"
					},
					"_dummy": {
						"type": "String"
					},
					"_salesforcePortalAccess": {
						"type": "String",
						"defaultValue": "NABERS Online"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_members_rating')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/01a Create Customer Contact In Salesforce')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "createNotFoundCustomerContact",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_GetCustomerContactToCreateInSalesForce]",
								"storedProcedureParameters": {
									"batchid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "SalesforceSink",
								"writeBatchSize": 5000,
								"writeBehavior": "insert",
								"ignoreNullValues": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "StreetName",
											"type": "String"
										},
										"sink": {
											"name": "MailingStreet",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Suburb",
											"type": "String"
										},
										"sink": {
											"name": "MailingCity",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Postcode",
											"type": "String"
										},
										"sink": {
											"name": "MailingPostalCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "State",
											"type": "String"
										},
										"sink": {
											"name": "MailingState",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "phone",
											"type": "String"
										},
										"sink": {
											"name": "Phone",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Mobile",
											"type": "String"
										},
										"sink": {
											"name": "MobilePhone",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "fax",
											"type": "String"
										},
										"sink": {
											"name": "Fax",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Email",
											"type": "String"
										},
										"sink": {
											"name": "Email",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "AccountManagerFlag",
											"type": "Boolean"
										},
										"sink": {
											"name": "NO_Account_Manager__c",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "FirstName",
											"type": "String"
										},
										"sink": {
											"name": "FirstName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LastName",
											"type": "String"
										},
										"sink": {
											"name": "LastName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Title"
										},
										"sink": {
											"name": "Title",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "sf_record_type",
											"type": "String"
										},
										"sink": {
											"name": "RecordTypeId",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "db_stage_assessors",
								"type": "DatasetReference",
								"parameters": {
									"pBatch_Id": 1
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sf_contacts",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Update Batch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LogBatchDetails]",
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.pbatch_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"process_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"stage": {
									"value": "In Progress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NABERSStaging",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "usp_GetCustomers",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "createNotFoundCustomerContact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_GetCustomerContactToCreateInSalesForce]",
								"storedProcedureParameters": {
									"batchid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "db_members_rating",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "forEachRow",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set Variable Rating",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('_vnewCustomersInSF')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Lookup Each Customer Contact by Email In Salesforce",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "Select id from Contact\nwhere Email= '@{item().Email}'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "sf_company",
											"type": "DatasetReference"
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "UpdateNewSalesforceIdForCustomer",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Lookup Each Customer Contact by Email In Salesforce",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_UpdateNewSalesforceIdForCompany]",
										"storedProcedureParameters": {
											"batch_id": {
												"value": {
													"value": "@pipeline().parameters.pbatch_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"member_company_id": {
												"value": {
													"value": "@item().member_company_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"salesforce_company_Id": {
												"value": {
													"value": "@activity('Lookup Each Customer Contact by Email In Salesforce').output.firstRow.Id",
													"type": "Expression"
												},
												"type": "String"
											},
											"account_type": {
												"value": "customer contact",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "NABERSStaging",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Set Variable Rating",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "usp_GetCustomers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_vnewCustomersInSF",
							"value": {
								"value": "@activity('usp_GetCustomers').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"pbatch_id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"_vnewCustomersInSF": {
						"type": "Array"
					},
					"_vsf_CustomerRecord": {
						"type": "String"
					},
					"_vnewCustomerInSF": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_members_rating')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/01a Create Customer In Salesforce')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "createNotFoundCustomers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_GetCustomerToCreateInSalesForce]",
								"storedProcedureParameters": {
									"batchid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "SalesforceSink",
								"writeBatchSize": 5000,
								"writeBehavior": "insert",
								"ignoreNullValues": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Customer_Mailing_StreetName"
										},
										"sink": {
											"name": "ShippingStreet",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Customer_Mailing_Suburb"
										},
										"sink": {
											"name": "ShippingCity",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Customer_Mailing_State"
										},
										"sink": {
											"name": "ShippingState",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Customer_Mailing_Postcode"
										},
										"sink": {
											"name": "ShippingPostalCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Customer_ABN"
										},
										"sink": {
											"name": "NO_ABN__c",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Customer_SAP_Number"
										},
										"sink": {
											"name": "NO_SAP_Customer_Number__c",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Customer_TradingName"
										},
										"sink": {
											"name": "Name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Mailing_Country"
										},
										"sink": {
											"name": "ShippingCountry",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Customer_Organisation"
										},
										"sink": {
											"name": "NO_Organisation_Type__c"
										}
									},
									{
										"source": {
											"name": "sf_record_type"
										},
										"sink": {
											"name": "RecordTypeId"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "db_stage_assessors",
								"type": "DatasetReference",
								"parameters": {
									"pBatch_Id": 1
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sf_company",
								"type": "DatasetReference"
							}
						]
					},
					{
						"name": "Update Batch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LogBatchDetails]",
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.pbatch_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"process_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"stage": {
									"value": "In Progress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NABERSStaging",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "usp_GetCustomers",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "createNotFoundCustomers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_GetCustomerToCreateInSalesForce]",
								"storedProcedureParameters": {
									"batchid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "db_members_rating",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "forEachRow",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set Variable Rating",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('_vnewCustomersInSF')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Lookup Each Customer by ABN In Salesforce",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"query": {
												"value": "Select id from Account\nwhere NO_ABN__c = '@{item().Customer_ABN}'",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"dataset": {
											"referenceName": "sf_company",
											"type": "DatasetReference"
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "UpdateNewSalesforceIdForCustomer",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Lookup Each Customer by ABN In Salesforce",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_UpdateNewSalesforceIdForCompany]",
										"storedProcedureParameters": {
											"batch_id": {
												"value": {
													"value": "@pipeline().parameters.pbatch_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"member_company_id": {
												"value": {
													"value": "@item().member_company_id",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"salesforce_company_Id": {
												"value": {
													"value": "@activity('Lookup Each Customer by ABN In Salesforce').output.firstRow.Id",
													"type": "Expression"
												},
												"type": "String"
											},
											"account_type": {
												"value": "customer",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "NABERSStaging",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Set Variable Rating",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "usp_GetCustomers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "_vnewCustomersInSF",
							"value": {
								"value": "@activity('usp_GetCustomers').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"pbatch_id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"_vnewCustomersInSF": {
						"type": "Array"
					},
					"_vsf_CustomerRecord": {
						"type": "String"
					},
					"_vnewCustomerInSF": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_members_rating')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/02 Create Ratings')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update Batch",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_LogBatchDetails]",
							"storedProcedureParameters": {
								"batch_id": {
									"value": {
										"value": "@pipeline().parameters.pbatch_id",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"process_name": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"stage": {
									"value": "In Progress",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "NABERSStaging",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "createRating",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update Batch",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[usp_GetTransformedRatings]",
								"storedProcedureParameters": {
									"batchid": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.pbatch_id",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "SalesforceSink",
								"writeBatchSize": 5000,
								"writeBehavior": "insert",
								"ignoreNullValues": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "building_type",
											"type": "String"
										},
										"sink": {
											"name": "Building_Type__c",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "source_rating_id"
										},
										"sink": {
											"name": "NO_Member_Rating_Id__c"
										}
									},
									{
										"source": {
											"name": "assessor_email"
										},
										"sink": {
											"name": "Assessor_Email__c"
										}
									},
									{
										"source": {
											"name": "customer_email"
										},
										"sink": {
											"name": "Customer_Email__c"
										}
									},
									{
										"source": {
											"name": "cert_building_name"
										},
										"sink": {
											"name": "Building_Name_On_Certificate__c"
										}
									},
									{
										"source": {
											"name": "cert_customer_name"
										},
										"sink": {
											"name": "Customer_Name_On_Certificate__c"
										}
									},
									{
										"source": {
											"name": "cert_valid_from"
										},
										"sink": {
											"name": "Valid_From_Date__c"
										}
									},
									{
										"source": {
											"name": "cert_valid_to"
										},
										"sink": {
											"name": "Valid_To_Date__c"
										}
									},
									{
										"source": {
											"name": "status"
										},
										"sink": {
											"name": "Status__c"
										}
									},
									{
										"source": {
											"name": "period_from"
										},
										"sink": {
											"name": "Rating_Start_Date__c"
										}
									},
									{
										"source": {
											"name": "has_cinema"
										},
										"sink": {
											"name": "hasCinema__c"
										}
									},
									{
										"source": {
											"name": "rating_ref_number"
										},
										"sink": {
											"name": "NO_Member_Rating_Ref_Number__c"
										}
									},
									{
										"source": {
											"name": "lodged_date"
										},
										"sink": {
											"name": "Lodge_Date__c"
										}
									},
									{
										"source": {
											"name": "rating_main_purpose"
										},
										"sink": {
											"name": "Main_purpose_of_rating__c"
										}
									},
									{
										"source": {
											"name": "publicly_listed"
										},
										"sink": {
											"name": "Rating_Publicly_Listed__c"
										}
									},
									{
										"source": {
											"name": "rating_type"
										},
										"sink": {
											"name": "Rating_Type__c"
										}
									},
									{
										"source": {
											"name": "rating_scope"
										},
										"sink": {
											"name": "Rating_Scope__c"
										}
									},
									{
										"source": {
											"name": "sf_officer_id"
										},
										"sink": {
											"name": "Tech_Officer__c"
										}
									},
									{
										"source": {
											"name": "last_update_date"
										},
										"sink": {
											"name": "Last_Status_Update__c"
										}
									},
									{
										"source": {
											"name": "renew_replace"
										},
										"sink": {
											"name": "Renew_Replace__c"
										}
									},
									{
										"source": {
											"name": "review_summary_page"
										},
										"sink": {
											"name": "Review_summary_page__c"
										}
									},
									{
										"source": {
											"name": "rating_information_page"
										},
										"sink": {
											"name": "Rating_information_page__c"
										}
									},
									{
										"source": {
											"name": "lodge_rating_page"
										},
										"sink": {
											"name": "Lodge_rating_page__c"
										}
									},
									{
										"source": {
											"name": "rating_details_page"
										},
										"sink": {
											"name": "Rating_details_page__c"
										}
									},
									{
										"source": {
											"name": "parking_space_page"
										},
										"sink": {
											"name": "Parking_Spaces_Page__c"
										}
									},
									{
										"source": {
											"name": "water_page"
										},
										"sink": {
											"name": "Water_page__c"
										}
									},
									{
										"source": {
											"name": "has_parking_space"
										},
										"sink": {
											"name": "Has_Parking_Space__c"
										}
									},
									{
										"source": {
											"name": "has_gym"
										},
										"sink": {
											"name": "Has_Gym__c"
										}
									},
									{
										"source": {
											"name": "has_food_court"
										},
										"sink": {
											"name": "Has_Food_Court__c"
										}
									},
									{
										"source": {
											"name": "conflict_of_interest"
										},
										"sink": {
											"name": "Conflict_Of_Interest__c"
										}
									},
									{
										"source": {
											"name": "compliant_with_current_rules"
										},
										"sink": {
											"name": "Compliant_With_Rules__c"
										}
									},
									{
										"source": {
											"name": "relodged_date"
										},
										"sink": {
											"name": "Relodge_Date__c"
										}
									},
									{
										"source": {
											"name": "rating_data_complete"
										},
										"sink": {
											"name": "Rating_Data_Complete_Flag__c"
										}
									},
									{
										"source": {
											"name": "assessor_declaration"
										},
										"sink": {
											"name": "Assessor_Declaration__c"
										}
									},
									{
										"source": {
											"name": "customer_aware_of_star_rating"
										},
										"sink": {
											"name": "Customer_Aware_Of_Star_Rating__c"
										}
									},
									{
										"source": {
											"name": "water_star_rating_with_recycle"
										},
										"sink": {
											"name": "Water_Star_Rating_With_Recycled_Water__c"
										}
									},
									{
										"source": {
											"name": "water_star_rating_without_recycle"
										},
										"sink": {
											"name": "Water_Star_Rating_Without_Recycled_Water__c"
										}
									},
									{
										"source": {
											"name": "energy_star_rating_with_recycle"
										},
										"sink": {
											"name": "Energy_Star_Rating_With_Green_Power__c"
										}
									},
									{
										"source": {
											"name": "energy_star_rating_without_recycle"
										},
										"sink": {
											"name": "Energy_Star_Rating_Without_Green_Power__c"
										}
									},
									{
										"source": {
											"name": "total_energy_consumption"
										},
										"sink": {
											"name": "Total_Energy_Consumption__c"
										}
									},
									{
										"source": {
											"name": "weekly_core_hours_of_Service"
										},
										"sink": {
											"name": "Weekly_Core_Hours_Of_Service__c"
										}
									},
									{
										"source": {
											"name": "total_electricity_consumption"
										},
										"sink": {
											"name": "Total_Electricity_Consumption__c"
										}
									},
									{
										"source": {
											"name": "total_diesel_consumption"
										},
										"sink": {
											"name": "Total_Diesel_Consumption__c"
										}
									},
									{
										"source": {
											"name": "recycle_normalised_water_consumption"
										},
										"sink": {
											"name": "Recycle_Normalised_Water_Consumption__c"
										}
									},
									{
										"source": {
											"name": "total_water_consumption"
										},
										"sink": {
											"name": "Total_Water_Consumption__c"
										}
									},
									{
										"source": {
											"name": "total_recycled_water_percent"
										},
										"sink": {
											"name": "Total_Recycled_Water_Percent__c"
										}
									},
									{
										"source": {
											"name": "total_gas_consumption"
										},
										"sink": {
											"name": "Total_Gas_Consumption__c"
										}
									},
									{
										"source": {
											"name": "rating_lodgement_fees"
										},
										"sink": {
											"name": "Rating_Lodgement_Fees__c"
										}
									},
									{
										"source": {
											"name": "predicted_greenhouse_gas_intensity"
										},
										"sink": {
											"name": "Predicted_Greenhouse_Gas_Intensity__c"
										}
									},
									{
										"source": {
											"name": "predicted_average_water_use"
										},
										"sink": {
											"name": "Predicted_Average_Water_Use__c"
										}
									},
									{
										"source": {
											"name": "number_of_trading_days"
										},
										"sink": {
											"name": "Number_Of_Trading_Days__c"
										}
									},
									{
										"source": {
											"name": "no_recycle_predicted_average_water_use"
										},
										"sink": {
											"name": "No_Recycle_Predicted_Average_Water_Use__c"
										}
									},
									{
										"source": {
											"name": "no_greenpower_ghg_intensity_scope_12"
										},
										"sink": {
											"name": "No_GreenPower_GHG_Intensity_Scope_12__c"
										}
									},
									{
										"source": {
											"name": "no_greenpower_ghg_intensity_scope_123"
										},
										"sink": {
											"name": "No_GreenPower_GHG_Intensity_Scope_123__c"
										}
									},
									{
										"source": {
											"name": "no_greenpower_ghg_emissions_scope_12"
										},
										"sink": {
											"name": "No_GreenPower_GHG_Emissions_Scope_12__c"
										}
									},
									{
										"source": {
											"name": "no_greenpower_ghg_emissions_scope_123"
										},
										"sink": {
											"name": "No_GreenPower_GHG_Emissions_Scope_123__c"
										}
									},
									{
										"source": {
											"name": "greenhouse_gas_intensity_scope_123"
										},
										"sink": {
											"name": "Greenhouse_Gas_Intensity_Scope_123__c"
										}
									},
									{
										"source": {
											"name": "greenhouse_gas_emissions_scope_123"
										},
										"sink": {
											"name": "Greenhouse_Gas_Emissions_Scope_123__c"
										}
									},
									{
										"source": {
											"name": "energy_intensity"
										},
										"sink": {
											"name": "Energy_Intensity__c"
										}
									},
									{
										"source": {
											"name": "explain_why_not_compliant"
										},
										"sink": {
											"name": "Explain_Why_Not_Compliant__c"
										}
									},
									{
										"source": {
											"name": "is_small_shopping_centre"
										},
										"sink": {
											"name": "Is_Small_Shopping_Centre__c"
										}
									},
									{
										"source": {
											"name": "using_latest_rules_water"
										},
										"sink": {
											"name": "Using_Latest_Water_Rules_Version__c"
										}
									},
									{
										"source": {
											"name": "using_latest_rules_energy"
										},
										"sink": {
											"name": "Using_Latest_Energy_Rules_Version__c"
										}
									},
									{
										"source": {
											"name": "single_or_multi_storey"
										},
										"sink": {
											"name": "Shopping_Centre_Storey__c"
										}
									},
									{
										"source": {
											"name": "sf_customer_id"
										},
										"sink": {
											"name": "Customer__c"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "db_transformed_ratings",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "sf_Ratings",
								"type": "DatasetReference"
							}
						]
					}
				],
				"parameters": {
					"pbatch_id": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_transformed_ratings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cn_db_rating_stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NABERSStaging",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RatingHeaderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RatingReferenceNumber",
						"type": "varchar"
					},
					{
						"name": "PremiseTypeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PremiseType",
						"type": "varchar"
					},
					{
						"name": "PremiseID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PremiseName",
						"type": "varchar"
					},
					{
						"name": "AssessorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AssessorEmail",
						"type": "varchar"
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					},
					{
						"name": "Customer_TradingName",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_StreeNumber",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_StreetName",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_Suburb",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_Postcode",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_State",
						"type": "varchar"
					},
					{
						"name": "RatingPeriodFrom",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "RatingPeriodTo",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PublicListingFlag",
						"type": "bit"
					},
					{
						"name": "OfficerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RatingStatusID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RatingStatus",
						"type": "varchar"
					},
					{
						"name": "LodgedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PaymentStatusID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentStatus",
						"type": "varchar"
					},
					{
						"name": "PaidDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CertificateValidFrom",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CertificateValidTo",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PremiseNameOnCert",
						"type": "varchar"
					},
					{
						"name": "CustomerNameOnCert",
						"type": "varchar"
					},
					{
						"name": "Certificate_Customer_Email",
						"type": "varchar"
					},
					{
						"name": "LastActionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ReplaceFlag",
						"type": "bit"
					},
					{
						"name": "RenewFlag",
						"type": "bit"
					},
					{
						"name": "PreviousRatingHeaderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NewRatingHeaderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StreetNumber",
						"type": "varchar"
					},
					{
						"name": "StreetName",
						"type": "varchar"
					},
					{
						"name": "Suburb",
						"type": "varchar"
					},
					{
						"name": "Postcode",
						"type": "varchar"
					},
					{
						"name": "State",
						"type": "varchar"
					},
					{
						"name": "RatingTypes",
						"type": "nvarchar"
					},
					{
						"name": "CinemaTheatres",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ShoppingCentreWaterSummaryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FloorConfiguration",
						"type": "varchar"
					},
					{
						"name": "ParkingSpacesMechanical",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ParkingSpacesNatural",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "TotalGymGLAR",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "FoodCourtSeats",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "conflictOfInterestFlag",
						"type": "bit"
					},
					{
						"name": "InComplianceWithCurrentRules",
						"type": "bit"
					},
					{
						"name": "WaterStarRatingWRecycle",
						"type": "varchar"
					},
					{
						"name": "WaterStarRatingWoRecycle",
						"type": "varchar"
					},
					{
						"name": "EnergyStarRatingWRecycle",
						"type": "varchar"
					},
					{
						"name": "EnergyStarRatingWoRecycle",
						"type": "varchar"
					},
					{
						"name": "totalEnergyConsumption",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "WeeklyCoreHoursOfService",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "TotalElectricityConsumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "TotalDieselConsumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "WaterConsumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "RecycleNormalisedWaterConsumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "TotalWaterConsumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "TotalRecycledWaterPercent",
						"type": "decimal",
						"precision": 6,
						"scale": 2
					},
					{
						"name": "TotalGasConsumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "RatingLodgementFees",
						"type": "decimal",
						"precision": 12,
						"scale": 2
					},
					{
						"name": "PredictedGreenhouseGasIntensity",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "PredictedAverageWaterUse",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "NumberOfTradingDays",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "NoRecyclePredictedAverageWaterUse",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "NoGreenPower_GHG_IntensityScope_12",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "NoGreenPowerGHGIntensityScope123",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "NoGreenPowerGHGEmissionsScope12",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "NoGreenPowerGHGEmissionsScope123",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "GreenhouseGasIntensityScope123",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "GreenhouseGasEmissionsScope123",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "EnergyIntensity",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "ExplainWhyNotCompliant",
						"type": "varchar"
					},
					{
						"name": "IsSmallShoppingCentre",
						"type": "bit"
					},
					{
						"name": "batch_id",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "RatingHeaderStage"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_members_rating')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NABERSStaging",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "RatingHeaderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RatingReferenceNumber",
						"type": "varchar"
					},
					{
						"name": "PremiseTypeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PremiseType",
						"type": "varchar"
					},
					{
						"name": "PremiseID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PremiseName",
						"type": "varchar"
					},
					{
						"name": "AssessorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AssessorEmail",
						"type": "varchar"
					},
					{
						"name": "Customer_Name",
						"type": "varchar"
					},
					{
						"name": "Customer_TradingName",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_StreeNumber",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_StreetName",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_Suburb",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_Postcode",
						"type": "varchar"
					},
					{
						"name": "Customer_Mailing_State",
						"type": "varchar"
					},
					{
						"name": "Customer_ABN",
						"type": "varchar"
					},
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RatingPeriodFrom",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "RatingPeriodTo",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PublicListingFlag",
						"type": "bit"
					},
					{
						"name": "OfficerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RatingStatusID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RatingStatus",
						"type": "varchar"
					},
					{
						"name": "LodgedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PaymentStatusID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentStatus",
						"type": "varchar"
					},
					{
						"name": "PaidDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CertificateValidFrom",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CertificateValidTo",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PremiseNameOnCert",
						"type": "varchar"
					},
					{
						"name": "CustomerNameOnCert",
						"type": "varchar"
					},
					{
						"name": "Certificate_Customer_Email",
						"type": "varchar"
					},
					{
						"name": "LastActionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ReplaceFlag",
						"type": "bit"
					},
					{
						"name": "RenewFlag",
						"type": "bit"
					},
					{
						"name": "PreviousRatingHeaderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NewRatingHeaderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StreetNumber",
						"type": "varchar"
					},
					{
						"name": "StreetName",
						"type": "varchar"
					},
					{
						"name": "Suburb",
						"type": "varchar"
					},
					{
						"name": "Postcode",
						"type": "varchar"
					},
					{
						"name": "State",
						"type": "varchar"
					},
					{
						"name": "RatingTypes",
						"type": "nvarchar"
					},
					{
						"name": "CinemaTheatres",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ShoppingCentreWaterSummaryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FloorConfiguration",
						"type": "varchar"
					},
					{
						"name": "ParkingSpacesMechanical",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "ParkingSpacesNatural",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "TotalGymGLAR",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "FoodCourtSeats",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "conflictOfInterestFlag",
						"type": "bit"
					},
					{
						"name": "InComplianceWithCurrentRules",
						"type": "bit"
					},
					{
						"name": "WaterStarRatingWRecycle",
						"type": "varchar"
					},
					{
						"name": "WaterStarRatingWoRecycle",
						"type": "varchar"
					},
					{
						"name": "EnergyStarRatingWRecycle",
						"type": "varchar"
					},
					{
						"name": "EnergyStarRatingWoRecycle",
						"type": "varchar"
					},
					{
						"name": "totalEnergyConsumption",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "WeeklyCoreHoursOfService",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "TotalElectricityConsumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "TotalDieselConsumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "WaterConsumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "RecycleNormalisedWaterConsumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "TotalWaterConsumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "TotalRecycledWaterPercent",
						"type": "decimal",
						"precision": 6,
						"scale": 2
					},
					{
						"name": "TotalGasConsumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "RatingLodgementFees",
						"type": "decimal",
						"precision": 12,
						"scale": 2
					},
					{
						"name": "PredictedGreenhouseGasIntensity",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "PredictedAverageWaterUse",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "NumberOfTradingDays",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "NoRecyclePredictedAverageWaterUse",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "NoGreenPower_GHG_IntensityScope_12",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "NoGreenPowerGHGIntensityScope123",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "NoGreenPowerGHGEmissionsScope12",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "NoGreenPowerGHGEmissionsScope123",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "GreenhouseGasIntensityScope123",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "GreenhouseGasEmissionsScope123",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "EnergyIntensity",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "ExplainWhyNotCompliant",
						"type": "varchar"
					},
					{
						"name": "IsSmallShoppingCentre",
						"type": "bit"
					},
					{
						"name": "batch_id",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "RatingHeaderStage"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_transformed_ratings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NABERSStaging",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "batch_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "building_type",
						"type": "varchar"
					},
					{
						"name": "source_rating_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "sf_company_id",
						"type": "varchar"
					},
					{
						"name": "sf_building_id",
						"type": "varchar"
					},
					{
						"name": "sf_rating_id",
						"type": "varchar"
					},
					{
						"name": "sf_assessor_id",
						"type": "varchar"
					},
					{
						"name": "sf_customer_id",
						"type": "varchar"
					},
					{
						"name": "assessor_email",
						"type": "varchar"
					},
					{
						"name": "customer_email",
						"type": "varchar"
					},
					{
						"name": "cert_building_name",
						"type": "varchar"
					},
					{
						"name": "cert_customer_name",
						"type": "varchar"
					},
					{
						"name": "rating_type",
						"type": "varchar"
					},
					{
						"name": "rating_main_purpose",
						"type": "varchar"
					},
					{
						"name": "has_cinema",
						"type": "bit"
					},
					{
						"name": "period_from",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "period_to",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "status",
						"type": "varchar"
					},
					{
						"name": "cert_valid_from",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "cert_valid_to",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "rating_ref_number",
						"type": "varchar"
					},
					{
						"name": "lodged_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "rating_scope",
						"type": "varchar"
					},
					{
						"name": "publicly_listed",
						"type": "bit"
					},
					{
						"name": "sf_officer_id",
						"type": "varchar"
					},
					{
						"name": "last_update_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "renew_replace",
						"type": "varchar"
					},
					{
						"name": "sync_status",
						"type": "varchar"
					},
					{
						"name": "review_summary_page",
						"type": "varchar"
					},
					{
						"name": "using_latest_rules",
						"type": "varchar"
					},
					{
						"name": "rating_information_page",
						"type": "varchar"
					},
					{
						"name": "lodge_rating_page",
						"type": "varchar"
					},
					{
						"name": "rating_details_page",
						"type": "varchar"
					},
					{
						"name": "parking_space_page",
						"type": "varchar"
					},
					{
						"name": "water_page",
						"type": "varchar"
					},
					{
						"name": "has_parking_space",
						"type": "varchar"
					},
					{
						"name": "has_gym",
						"type": "varchar"
					},
					{
						"name": "has_food_court",
						"type": "varchar"
					},
					{
						"name": "conflict_of_interest",
						"type": "varchar"
					},
					{
						"name": "compliant_with_current_rules",
						"type": "varchar"
					},
					{
						"name": "relodged_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "rating_data_complete",
						"type": "varchar"
					},
					{
						"name": "assessor_declaration",
						"type": "varchar"
					},
					{
						"name": "customer_aware_of_star_rating",
						"type": "varchar"
					},
					{
						"name": "water_star_rating_with_recycle",
						"type": "varchar"
					},
					{
						"name": "water_star_rating_without_recycle",
						"type": "varchar"
					},
					{
						"name": "energy_star_rating_with_recycle",
						"type": "varchar"
					},
					{
						"name": "energy_star_rating_without_recycle",
						"type": "varchar"
					},
					{
						"name": "total_energy_consumption",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "weekly_core_hours_of_Service",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "total_electricity_consumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "total_diesel_consumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "water_consumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "recycle_normalised_water_consumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "total_water_consumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "total_recycled_water_percent",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "total_gas_consumption",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "rating_lodgement_fees",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "predicted_greenhouse_gas_intensity",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "predicted_average_water_use",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "number_of_trading_days",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "no_recycle_predicted_average_water_use",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "no_greenpower_ghg_intensity_scope_12",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "no_greenpower_ghg_intensity_scope_123",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "no_greenpower_ghg_emissions_scope_12",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "no_greenpower_ghg_emissions_scope_123",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "greenhouse_gas_intensity_scope_123",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "greenhouse_gas_emissions_scope_123",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "energy_intensity",
						"type": "decimal",
						"precision": 12,
						"scale": 3
					},
					{
						"name": "explain_why_not_compliant",
						"type": "varchar"
					},
					{
						"name": "is_small_shopping_centre",
						"type": "varchar"
					},
					{
						"name": "using_latest_rules_water",
						"type": "varchar"
					},
					{
						"name": "using_latest_rules_energy",
						"type": "varchar"
					},
					{
						"name": "single_or_multi_storey",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Transformed_Ratings"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_Transform_Country_In_Company')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db_lookup_sf_company_ids",
								"type": "DatasetReference"
							},
							"name": "getLookupSFCompany"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "db_lookup_sf_company_ids",
								"type": "DatasetReference"
							},
							"name": "updateLookupSFCmpany"
						}
					],
					"transformations": [
						{
							"name": "alterByMailingBillingCountry"
						},
						{
							"name": "newColumns"
						}
					],
					"script": "parameters{\n\tpbatch_id as integer (1)\n}\nsource(output(\n\t\tid as integer,\n\t\tsalesforce_company_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_company_id as integer,\n\t\tMailing_Country as string,\n\t\tBilling_Country as string,\n\t\tsync_status as string,\n\t\taccount_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getLookupSFCompany\ngetLookupSFCompany alterRow(updateIf(isNull(Mailing_Country)||isNull(Billing_Country))) ~> alterByMailingBillingCountry\nalterByMailingBillingCountry derive(DefaultMailingCountry = \"Australia\",\n\t\tDefaultBillingCountry = \"Australia\",\n\t\tid = id) ~> newColumns\nnewColumns sink(input(\n\t\tid as integer,\n\t\tsalesforce_company_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_company_id as integer,\n\t\tMailing_Country as string,\n\t\tBilling_Country as string,\n\t\tsync_status as string,\n\t\taccount_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['id'],\n\tformat: 'table',\n\tmapColumn(\n\t\tMailing_Country = DefaultMailingCountry,\n\t\tBilling_Country = DefaultBillingCountry,\n\t\tid\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> updateLookupSFCmpany"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_Transform_Rating')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db_members_rating",
								"type": "DatasetReference"
							},
							"name": "getRatings"
						},
						{
							"dataset": {
								"referenceName": "db_lookup_sf_buildings_ids",
								"type": "DatasetReference"
							},
							"name": "getLookupSalesforceBuildings"
						},
						{
							"dataset": {
								"referenceName": "db_lookup_sf_assessors_ids",
								"type": "DatasetReference"
							},
							"name": "getLookupSalesforceAssessors"
						},
						{
							"dataset": {
								"referenceName": "db_lookup_sf_officer_ids",
								"type": "DatasetReference"
							},
							"name": "getLookupSalesforceTechOfficer"
						},
						{
							"dataset": {
								"referenceName": "db_lookup_sf_company_ids",
								"type": "DatasetReference"
							},
							"name": "getLookupSalesforceCompany"
						},
						{
							"dataset": {
								"referenceName": "db_lookup_sf_company_ids",
								"type": "DatasetReference"
							},
							"name": "getLookupSalesforceCustomers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "db_transformed_ratings",
								"type": "DatasetReference"
							},
							"name": "dumpToSFTransofrmedRatings"
						}
					],
					"transformations": [
						{
							"name": "filterBatchRatings"
						},
						{
							"name": "joinLookupSalesforceBuilding"
						},
						{
							"name": "filterSFBuildingByBatch"
						},
						{
							"name": "joinLookupSalesforceAssessors"
						},
						{
							"name": "filterSFAssessorsByBatch"
						},
						{
							"name": "derivedFields"
						},
						{
							"name": "filterSFOfficerByBatch"
						},
						{
							"name": "joinLookupSalesforceUsers"
						},
						{
							"name": "filterSFCompanyByBatch"
						},
						{
							"name": "joinLookupSalesforceCompany"
						},
						{
							"name": "filterSFCustomerByBatch"
						},
						{
							"name": "joinLookupsSalesforceCustomer"
						}
					],
					"script": "parameters{\n\tpbatch_id as integer (1),\n\tvDefaultComplete as string ('Complete'),\n\tvDefaultYes as string ('Yes')\n}\nsource(output(\n\t\tRatingHeaderID as integer,\n\t\tRatingReferenceNumber as string,\n\t\tPremiseTypeID as integer,\n\t\tPremiseType as string,\n\t\tPremiseID as integer,\n\t\tPremiseName as string,\n\t\tAssessorID as integer,\n\t\tAssessorEmail as string,\n\t\tCustomer_Name as string,\n\t\tCustomer_TradingName as string,\n\t\tCustomer_Mailing_StreeNumber as string,\n\t\tCustomer_Mailing_StreetName as string,\n\t\tCustomer_Mailing_Suburb as string,\n\t\tCustomer_Mailing_Postcode as string,\n\t\tCustomer_Mailing_State as string,\n\t\tCustomer_ABN as string,\n\t\tcustomer_id as integer,\n\t\tRatingPeriodFrom as timestamp,\n\t\tRatingPeriodTo as timestamp,\n\t\tPublicListingFlag as boolean,\n\t\tOfficerID as integer,\n\t\tRatingStatusID as integer,\n\t\tRatingStatus as string,\n\t\tLodgedDate as timestamp,\n\t\tPaymentStatusID as integer,\n\t\tPaymentStatus as string,\n\t\tPaidDate as timestamp,\n\t\tCertificateValidFrom as timestamp,\n\t\tCertificateValidTo as timestamp,\n\t\tPremiseNameOnCert as string,\n\t\tCustomerNameOnCert as string,\n\t\tCertificate_Customer_Email as string,\n\t\tLastActionDate as timestamp,\n\t\tReplaceFlag as boolean,\n\t\tRenewFlag as boolean,\n\t\tPreviousRatingHeaderID as integer,\n\t\tNewRatingHeaderID as integer,\n\t\tStreetNumber as string,\n\t\tStreetName as string,\n\t\tSuburb as string,\n\t\tPostcode as string,\n\t\tState as string,\n\t\tRatingTypes as string,\n\t\tCinemaTheatres as decimal(8,2),\n\t\tShoppingCentreWaterSummaryID as integer,\n\t\tFloorConfiguration as string,\n\t\tParkingSpacesMechanical as decimal(8,2),\n\t\tParkingSpacesNatural as decimal(8,2),\n\t\tTotalGymGLAR as decimal(12,3),\n\t\tFoodCourtSeats as decimal(8,2),\n\t\tconflictOfInterestFlag as boolean,\n\t\tInComplianceWithCurrentRules as boolean,\n\t\tWaterStarRatingWRecycle as string,\n\t\tWaterStarRatingWoRecycle as string,\n\t\tEnergyStarRatingWRecycle as string,\n\t\tEnergyStarRatingWoRecycle as string,\n\t\ttotalEnergyConsumption as decimal(19,4),\n\t\tWeeklyCoreHoursOfService as decimal(8,2),\n\t\tTotalElectricityConsumption as decimal(12,3),\n\t\tTotalDieselConsumption as decimal(12,3),\n\t\tWaterConsumption as decimal(12,3),\n\t\tRecycleNormalisedWaterConsumption as decimal(12,3),\n\t\tTotalWaterConsumption as decimal(12,3),\n\t\tTotalRecycledWaterPercent as decimal(6,2),\n\t\tTotalGasConsumption as decimal(12,3),\n\t\tRatingLodgementFees as decimal(12,2),\n\t\tPredictedGreenhouseGasIntensity as decimal(12,3),\n\t\tPredictedAverageWaterUse as decimal(12,3),\n\t\tNumberOfTradingDays as decimal(8,2),\n\t\tNoRecyclePredictedAverageWaterUse as decimal(12,3),\n\t\tNoGreenPower_GHG_IntensityScope_12 as decimal(12,3),\n\t\tNoGreenPowerGHGIntensityScope123 as decimal(12,3),\n\t\tNoGreenPowerGHGEmissionsScope12 as decimal(12,3),\n\t\tNoGreenPowerGHGEmissionsScope123 as decimal(12,3),\n\t\tGreenhouseGasIntensityScope123 as decimal(12,3),\n\t\tGreenhouseGasEmissionsScope123 as decimal(12,3),\n\t\tEnergyIntensity as decimal(12,3),\n\t\tExplainWhyNotCompliant as string,\n\t\tIsSmallShoppingCentre as boolean,\n\t\tbatch_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_COMMITTED',\n\tformat: 'table') ~> getRatings\nsource(output(\n\t\tid as integer,\n\t\tsalesforce_building_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_premise_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getLookupSalesforceBuildings\nsource(output(\n\t\tid as integer,\n\t\tsalesforce_assessor_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_assessor_id as integer,\n\t\tsalesforce_company_id as string,\n\t\tmember_company_id as integer,\n\t\tsync_status as string,\n\t\tmailing_country as string,\n\t\tbilling_country as string,\n\t\taccredition as string,\n\t\trating_type as string,\n\t\tregional_cleaned as string,\n\t\tsalesforce_contact_type as string,\n\t\tsalesforce_portal_access as string,\n\t\tsalesforce_user_active as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getLookupSalesforceAssessors\nsource(output(\n\t\tid as integer,\n\t\tsalesforce_user_Id as string,\n\t\tmember_officer_id as integer,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getLookupSalesforceTechOfficer\nsource(output(\n\t\tid as integer,\n\t\tsalesforce_company_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_company_id as integer,\n\t\tMailing_Country as string,\n\t\tBilling_Country as string,\n\t\tsync_status as string,\n\t\taccount_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getLookupSalesforceCompany\nsource(output(\n\t\tid as integer,\n\t\tsalesforce_company_Id as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_company_id as integer,\n\t\tMailing_Country as string,\n\t\tBilling_Country as string,\n\t\tsync_status as string,\n\t\taccount_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getLookupSalesforceCustomers\ngetRatings filter(equals(batch_id, $pbatch_id)) ~> filterBatchRatings\njoinLookupSalesforceAssessors, filterSFBuildingByBatch join(PremiseID == member_premise_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinLookupSalesforceBuilding\ngetLookupSalesforceBuildings filter(equals(batch_id,  $pbatch_id)) ~> filterSFBuildingByBatch\nderivedFields, filterSFAssessorsByBatch join(AssessorID == member_assessor_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinLookupSalesforceAssessors\ngetLookupSalesforceAssessors filter(equals(batch_id,  $pbatch_id)) ~> filterSFAssessorsByBatch\nfilterBatchRatings derive(D_Rating_Scope = iif(equalsIgnoreCase(PremiseType, 'shopping centre'), 'Not applicable', ''),\n\t\tD_Main_Purpose_Of_Rating = iif(equalsIgnoreCase(PremiseName, 'shopping centre'), 'None of the above (NABERS voluntary rating)', ''),\n\t\tD_Renew_Replace = iif(!isNull(RenewFlag) || !isNull(ReplaceFlag), \r\niif(RenewFlag, 'Renew', iif(ReplaceFlag, 'Replace', '')),''),\n\t\tD_Review_Summary_Page = $vDefaultComplete,\n\t\tD_Using_Latest_Rules_Water = $vDefaultYes,\n\t\tD_Using_Latest_Rules_Energy = $vDefaultYes,\n\t\tD_Rating_Information_Page = $vDefaultComplete,\n\t\tD_Lodge_Rating_Page = $vDefaultComplete,\n\t\tD_Rating_Details_Page = $vDefaultComplete,\n\t\tD_Parking_Space_Page = $vDefaultComplete,\n\t\tD_HasCinemas = CinemaTheatres > 0,\n\t\tD_WaterPageComplete = iif(isNull(ShoppingCentreWaterSummaryID), '', $vDefaultComplete),\n\t\tD_HasParkingSpace = ParkingSpacesMechanical + ParkingSpacesNatural > 0,\n\t\tD_HasGym = TotalGymGLAR > 0,\n\t\tD_HasFoodCourt = FoodCourtSeats > 0,\n\t\tD_ConflictOfInterest = iif(isNull(conflictOfInterestFlag) , false(), conflictOfInterestFlag),\n\t\tD_IsSmallShoppingCentre = iif(isNull(IsSmallShoppingCentre) , false(), IsSmallShoppingCentre),\n\t\tD_CompliantWithCurrentRules = iif(isNull(InComplianceWithCurrentRules) , false(), InComplianceWithCurrentRules),\n\t\tD_RelodgedDate = LodgedDate,\n\t\tD_RatingDataCompleteFlag = true(),\n\t\tD_AssessorDeclaration = true(),\n\t\tD_CustomerAwareOfStarRating = true(),\n\t\tD_SingleMultiStorey = iif(isNull(FloorConfiguration), 'Single storey', 'Multi-storey')) ~> derivedFields\ngetLookupSalesforceTechOfficer filter(equals(batch_id, $pbatch_id)) ~> filterSFOfficerByBatch\njoinLookupSalesforceBuilding, filterSFOfficerByBatch join(OfficerID == member_officer_id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> joinLookupSalesforceUsers\ngetLookupSalesforceCompany filter(equals(batch_id, $pbatch_id) && equals(account_type, 'company')) ~> filterSFCompanyByBatch\njoinLookupSalesforceUsers, filterSFCompanyByBatch join(getLookupSalesforceAssessors@member_company_id == getLookupSalesforceCompany@member_company_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinLookupSalesforceCompany\ngetLookupSalesforceCustomers filter(equals(batch_id, $pbatch_id) && equals(account_type, 'customer')) ~> filterSFCustomerByBatch\njoinLookupSalesforceCompany, filterSFCustomerByBatch join(customer_id == getLookupSalesforceCustomers@member_company_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinLookupsSalesforceCustomer\njoinLookupsSalesforceCustomer sink(input(\n\t\tid as integer,\n\t\tbatch_id as integer,\n\t\tbuilding_type as string,\n\t\tsource_rating_id as integer,\n\t\tsf_company_id as string,\n\t\tsf_building_id as string,\n\t\tsf_rating_id as string,\n\t\tsf_assessor_id as string,\n\t\tsf_customer_id as string,\n\t\tassessor_email as string,\n\t\tcustomer_email as string,\n\t\tcert_building_name as string,\n\t\tcert_customer_name as string,\n\t\trating_type as string,\n\t\trating_main_purpose as string,\n\t\thas_cinema as boolean,\n\t\tperiod_from as timestamp,\n\t\tperiod_to as timestamp,\n\t\tstatus as string,\n\t\tcert_valid_from as timestamp,\n\t\tcert_valid_to as timestamp,\n\t\trating_ref_number as string,\n\t\tlodged_date as timestamp,\n\t\trating_scope as string,\n\t\tpublicly_listed as boolean,\n\t\tsf_officer_id as string,\n\t\tlast_update_date as timestamp,\n\t\trenew_replace as string,\n\t\tsync_status as string,\n\t\treview_summary_page as string,\n\t\tusing_latest_rules as string,\n\t\trating_information_page as string,\n\t\tlodge_rating_page as string,\n\t\trating_details_page as string,\n\t\tparking_space_page as string,\n\t\twater_page as string,\n\t\thas_parking_space as string,\n\t\thas_gym as string,\n\t\thas_food_court as string,\n\t\tconflict_of_interest as string,\n\t\tcompliant_with_current_rules as string,\n\t\trelodged_date as timestamp,\n\t\trating_data_complete as string,\n\t\tassessor_declaration as string,\n\t\tcustomer_aware_of_star_rating as string,\n\t\twater_star_rating_with_recycle as string,\n\t\twater_star_rating_without_recycle as string,\n\t\tenergy_star_rating_with_recycle as string,\n\t\tenergy_star_rating_without_recycle as string,\n\t\ttotal_energy_consumption as decimal(19,4),\n\t\tweekly_core_hours_of_Service as decimal(8,2),\n\t\ttotal_electricity_consumption as decimal(12,3),\n\t\ttotal_diesel_consumption as decimal(12,3),\n\t\twater_consumption as decimal(12,3),\n\t\trecycle_normalised_water_consumption as decimal(12,3),\n\t\ttotal_water_consumption as decimal(12,3),\n\t\ttotal_recycled_water_percent as decimal(12,3),\n\t\ttotal_gas_consumption as decimal(12,3),\n\t\trating_lodgement_fees as decimal(12,3),\n\t\tpredicted_greenhouse_gas_intensity as decimal(12,3),\n\t\tpredicted_average_water_use as decimal(12,3),\n\t\tnumber_of_trading_days as decimal(12,3),\n\t\tno_recycle_predicted_average_water_use as decimal(12,3),\n\t\tno_greenpower_ghg_intensity_scope_12 as decimal(12,3),\n\t\tno_greenpower_ghg_intensity_scope_123 as decimal(12,3),\n\t\tno_greenpower_ghg_emissions_scope_12 as decimal(12,3),\n\t\tno_greenpower_ghg_emissions_scope_123 as decimal(12,3),\n\t\tgreenhouse_gas_intensity_scope_123 as decimal(12,3),\n\t\tgreenhouse_gas_emissions_scope_123 as decimal(12,3),\n\t\tenergy_intensity as decimal(12,3),\n\t\texplain_why_not_compliant as string,\n\t\tis_small_shopping_centre as string,\n\t\tusing_latest_rules_water as string,\n\t\tusing_latest_rules_energy as string,\n\t\tsingle_or_multi_storey as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tsource_rating_id = RatingHeaderID,\n\t\tbuilding_type = PremiseType,\n\t\tsf_building_id = salesforce_building_Id,\n\t\tbatch_id = getRatings@batch_id,\n\t\tsf_assessor_id = salesforce_assessor_Id,\n\t\tassessor_email = AssessorEmail,\n\t\tcustomer_email = Certificate_Customer_Email,\n\t\tcert_building_name = PremiseNameOnCert,\n\t\tcert_customer_name = CustomerNameOnCert,\n\t\tstatus = RatingStatus,\n\t\tperiod_from = RatingPeriodFrom,\n\t\tperiod_to = RatingPeriodTo,\n\t\tcert_valid_from = CertificateValidFrom,\n\t\tcert_valid_to = CertificateValidTo,\n\t\thas_cinema = D_HasCinemas,\n\t\trating_type = RatingTypes,\n\t\trating_main_purpose = D_Main_Purpose_Of_Rating,\n\t\trating_ref_number = RatingReferenceNumber,\n\t\tlodged_date = LodgedDate,\n\t\trating_scope = D_Rating_Scope,\n\t\tpublicly_listed = PublicListingFlag,\n\t\tsf_officer_id = salesforce_user_Id,\n\t\tsf_company_id = getLookupSalesforceAssessors@salesforce_company_id,\n\t\tlast_update_date = LastActionDate,\n\t\trenew_replace = D_Renew_Replace,\n\t\treview_summary_page = D_Review_Summary_Page,\n\t\tusing_latest_rules = D_Using_Latest_Rules_Water,\n\t\trating_information_page = D_Rating_Information_Page,\n\t\tlodge_rating_page = D_Lodge_Rating_Page,\n\t\trating_details_page = D_Rating_Details_Page,\n\t\tparking_space_page = D_Parking_Space_Page,\n\t\twater_page = D_WaterPageComplete,\n\t\thas_parking_space = D_HasParkingSpace,\n\t\thas_gym = D_HasGym,\n\t\thas_food_court = D_HasFoodCourt,\n\t\tconflict_of_interest = D_ConflictOfInterest,\n\t\tcompliant_with_current_rules = D_CompliantWithCurrentRules,\n\t\trelodged_date = D_RelodgedDate,\n\t\trating_data_complete = D_RatingDataCompleteFlag,\n\t\tassessor_declaration = D_AssessorDeclaration,\n\t\tcustomer_aware_of_star_rating = D_CustomerAwareOfStarRating,\n\t\twater_star_rating_with_recycle = WaterStarRatingWRecycle,\n\t\twater_star_rating_without_recycle = WaterStarRatingWoRecycle,\n\t\tenergy_star_rating_with_recycle = EnergyStarRatingWRecycle,\n\t\tenergy_star_rating_without_recycle = EnergyStarRatingWoRecycle,\n\t\ttotal_energy_consumption = totalEnergyConsumption,\n\t\tweekly_core_hours_of_Service = WeeklyCoreHoursOfService,\n\t\ttotal_electricity_consumption = TotalElectricityConsumption,\n\t\ttotal_diesel_consumption = TotalDieselConsumption,\n\t\twater_consumption = WaterConsumption,\n\t\trecycle_normalised_water_consumption = RecycleNormalisedWaterConsumption,\n\t\ttotal_water_consumption = TotalWaterConsumption,\n\t\ttotal_recycled_water_percent = TotalRecycledWaterPercent,\n\t\ttotal_gas_consumption = TotalGasConsumption,\n\t\trating_lodgement_fees = RatingLodgementFees,\n\t\tpredicted_greenhouse_gas_intensity = PredictedGreenhouseGasIntensity,\n\t\tpredicted_average_water_use = PredictedAverageWaterUse,\n\t\tno_recycle_predicted_average_water_use = NoRecyclePredictedAverageWaterUse,\n\t\tnumber_of_trading_days = NumberOfTradingDays,\n\t\tno_greenpower_ghg_intensity_scope_12 = NoGreenPower_GHG_IntensityScope_12,\n\t\tno_greenpower_ghg_intensity_scope_123 = NoGreenPowerGHGIntensityScope123,\n\t\tno_greenpower_ghg_emissions_scope_12 = NoGreenPowerGHGEmissionsScope12,\n\t\tno_greenpower_ghg_emissions_scope_123 = NoGreenPowerGHGEmissionsScope123,\n\t\tgreenhouse_gas_intensity_scope_123 = GreenhouseGasIntensityScope123,\n\t\tgreenhouse_gas_emissions_scope_123 = GreenhouseGasEmissionsScope123,\n\t\tenergy_intensity = EnergyIntensity,\n\t\texplain_why_not_compliant = ExplainWhyNotCompliant,\n\t\tis_small_shopping_centre = D_IsSmallShoppingCentre,\n\t\tsingle_or_multi_storey = D_SingleMultiStorey,\n\t\tusing_latest_rules_water = D_Using_Latest_Rules_Water,\n\t\tusing_latest_rules_energy = D_Using_Latest_Rules_Energy,\n\t\tsf_customer_id = getLookupSalesforceCustomers@salesforce_company_Id\n\t),\n\tskipDuplicateMapOutputs: true) ~> dumpToSFTransofrmedRatings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/db_members_rating')]",
				"[concat(variables('factoryId'), '/datasets/db_transformed_ratings')]"
			]
		}
	]
}