{
	"name": "01_Transform_Rating",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "db_members_rating",
						"type": "DatasetReference"
					},
					"name": "getRatings"
				},
				{
					"dataset": {
						"referenceName": "db_lookup_sf_buildings_ids",
						"type": "DatasetReference"
					},
					"name": "getLookupSalesforceBuildings"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "db_transformed_ratings",
						"type": "DatasetReference"
					},
					"name": "dumpToSFTransofrmedRatings"
				}
			],
			"transformations": [
				{
					"name": "currentBatchRatings"
				},
				{
					"name": "joiningAllSets"
				},
				{
					"name": "currentBatchSFBuildings"
				}
			],
			"script": "parameters{\n\tpbatch_id as integer (1)\n}\nsource(output(\n\t\tRatingHeaderID as integer,\n\t\tRatingReferenceNumber as string,\n\t\tPremiseTypeID as integer,\n\t\tPremiseType as string,\n\t\tPremiseID as integer,\n\t\tPremiseName as string,\n\t\tAssessorID as integer,\n\t\tAssessor as string,\n\t\tCustomerID as integer,\n\t\tCustomer as string,\n\t\tRatingPeriodFrom as timestamp,\n\t\tRatingPeriodTo as timestamp,\n\t\tPublicListingFlag as boolean,\n\t\tOfficerID as integer,\n\t\tOfficer as string,\n\t\tRatingStatusID as integer,\n\t\tRatingStatus as string,\n\t\tLodgedDate as timestamp,\n\t\tPaymentStatusID as integer,\n\t\tPaymentStatus as string,\n\t\tPaidDate as timestamp,\n\t\tCertificateValidFrom as timestamp,\n\t\tCertificateValidTo as timestamp,\n\t\tPremiseNameOnCert as string,\n\t\tCustomerNameOnCert as string,\n\t\tReplaceFlag as boolean,\n\t\tRenewFlag as boolean,\n\t\tPreviousRatingHeaderID as integer,\n\t\tNewRatingHeaderID as integer,\n\t\tStreetNumber as string,\n\t\tStreetName as string,\n\t\tSuburb as string,\n\t\tPostcode as string,\n\t\tState as string,\n\t\tBatch_Id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getRatings\nsource(output(\n\t\tid as integer,\n\t\tsalesforcebuildingId as string,\n\t\tname as string,\n\t\tpostcode as string,\n\t\tstate as string,\n\t\tstreetname as string,\n\t\tstreetnumber as string,\n\t\tsuburb as string,\n\t\tbatch_id as integer,\n\t\tcreated_on as timestamp,\n\t\tmember_premise_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> getLookupSalesforceBuildings\ngetRatings filter(ERROR_FUNCTION('equals(Batch_Id, $pbatch_id) => true()')) ~> currentBatchRatings\ncurrentBatchRatings, currentBatchSFBuildings join(PremiseID == member_premise_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joiningAllSets\ngetLookupSalesforceBuildings filter(ERROR_FUNCTION('equals(batch_id,  $pbatch_id) => true()')) ~> currentBatchSFBuildings\njoiningAllSets sink(input(\n\t\tid as integer,\n\t\tsource_rating_id as integer,\n\t\tbuilding_type as string,\n\t\tsf_company_id as string,\n\t\tsf_building_id as string,\n\t\tbatch_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tsource_rating_id = RatingHeaderID,\n\t\tbuilding_type = PremiseType,\n\t\tsf_building_id = salesforcebuildingId,\n\t\tbatch_id = getRatings@Batch_Id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> dumpToSFTransofrmedRatings"
		}
	}
}